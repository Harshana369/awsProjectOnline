{"version":3,"file":"static/js/3711.ff751aed.chunk.js","mappings":"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","sources":["components/AddSpecificUser.jsx","../node_modules/form-data/lib/browser.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { Form, Button, Row, Col, Table } from \"react-bootstrap\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\nimport XLSX from \"xlsx\";\r\nimport FormData from \"form-data\";\r\nimport Box from \"@mui/material/Box\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nfunction AddSpecificUser(props) {\r\n  let [users, setUsers] = useState([]);\r\n  let [companies, setCompanies] = useState([]);\r\n  let [msg, setMsg] = useState(\"\");\r\n  let [variant, setVariant] = useState(\"\");\r\n\r\n  const axiosInstance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n  });\r\n\r\n  let [form, setForm] = useState({});\r\n  let [errors, setErrors] = useState({});\r\n  let [open, setOpen] = useState(false);\r\n  let [openDialog, setOpenDialog] = useState(false);\r\n  const [activeStatus, setActiveStatus] = useState(true);\r\n  const [userCanAssignForTask, setUserCanAssignForTask] = useState(false);\r\n  const [adminRights, setAdminRights] = useState(false); // Set the default switch state\r\n\r\n  let [selectedCompanyCategory, setSelectedCompanyCategory] =\r\n    useState(\"Choose...\");\r\n\r\n  let setField = (field, value) => {\r\n    setForm({\r\n      ...form,\r\n      [field]: value,\r\n    });\r\n    if (!!errors[field])\r\n      setErrors({\r\n        ...errors,\r\n        [field]: null,\r\n      });\r\n    // console.log(field,value)\r\n  };\r\n\r\n  const findFormErrors = () => {\r\n    const {\r\n      name,\r\n      username,\r\n      email,\r\n      company,\r\n      projectCoordinator,\r\n      userDiv,\r\n      visbilityBasedOn,\r\n      mobileNo,\r\n      verificationOneId,\r\n      verificationTwoId,\r\n      approvalId,\r\n    } = form;\r\n    const newErrors = {};\r\n    // name errors\r\n\r\n    if (company === \"Mobitel\" && (userDiv === \"Choose...\" || !userDiv))\r\n      newErrors.userDiv = \"Choose a division!\";\r\n    if (\r\n      company === \"Mobitel\" &&\r\n      (visbilityBasedOn === \"Choose...\" || !visbilityBasedOn)\r\n    )\r\n      newErrors.visbilityBasedOn = \"Choose a option!\";\r\n    //if ( company === 'Mobitel' && (projectCoordinator === 'Choose...' || !projectCoordinator)) newErrors.projectCoordinator = 'Choose a project Coordinator!'\r\n    if (!email || email === \"\") newErrors.email = \"cannot be blank!\";\r\n    if (!company || company === \"Choose...\")\r\n      newErrors.company = \"Select a option!\";\r\n    if (!name || name === \"\") newErrors.name = \"cannot be blank!\";\r\n    if (!username || username === \"\") newErrors.username = \"cannot be blank!\";\r\n    if (!mobileNo || mobileNo === \"\") newErrors.mobileNo = \"cannot be blank!\";\r\n\r\n    return newErrors;\r\n  };\r\n\r\n  useEffect(() => {\r\n    axiosInstance\r\n      .get(\"projonline/users\", {\r\n        headers: {\r\n          token:\r\n            \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        // console.log(res.data);\r\n        setUsers(\r\n          res.data.users.filter((obj) => obj.company.companyName === \"Mobitel\")\r\n        );\r\n\r\n        // console.log(res);\r\n        setCompanies(res.data.companys);\r\n\r\n        setForm({\r\n          adminRights: false,\r\n          activeStatus: false,\r\n          userCanAssignForTask: false,\r\n          isProjectCoordinator: false,\r\n          verificationOneId: \"1\",\r\n          verificationTwoId: \"1\",\r\n          approvalId: \"1\",\r\n        });\r\n        return;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newErrors = findFormErrors();\r\n    // Conditional logic:\r\n    if (Object.keys(newErrors).length > 0) {\r\n      // We got errors!\r\n      setErrors(newErrors);\r\n    } else {\r\n      // console.log(form.company)\r\n      var userObject = {};\r\n      if (form.company === \"Mobitel\") {\r\n        var approvalPath = [\r\n          form.verificationOneId,\r\n          form.verificationTwoId,\r\n          form.approvalId,\r\n        ]\r\n          .filter((element) => element !== \"1\")\r\n          .filter((element) => element !== \"2\");\r\n        // console.log(approvalPath)\r\n\r\n        userObject = {\r\n          name: form.name,\r\n          email: form.email,\r\n          company: companies.find((item) => item.companyName === form.company)\r\n            ._id,\r\n          userDiv: form.userDiv,\r\n          mobileNo: form.mobileNo,\r\n          username: form.username,\r\n          adminRights: adminRights,\r\n          activeStatus: activeStatus,\r\n          userCanAssignForTask: userCanAssignForTask,\r\n          visbilityBasedOn: form.visbilityBasedOn,\r\n          projectCoordinator:\r\n            form.projectCoordinator == \"1\" ? null : form.projectCoordinator,\r\n          isProjectCoordinator: form.isProjectCoordinator,\r\n          approvalPath: approvalPath,\r\n        };\r\n      } else {\r\n        userObject = {\r\n          name: form.name,\r\n          email: form.email,\r\n          company: companies.find((item) => item.companyName === form.company)\r\n            ._id,\r\n          mobileNo: form.mobileNo,\r\n          username: form.username,\r\n          adminRights: adminRights,\r\n          activeStatus: activeStatus,\r\n          visbilityBasedOn: companies.find(\r\n            (item) => item.companyName === form.company\r\n          ).companyCategory,\r\n          userCanAssignForTask: userCanAssignForTask,\r\n          approvalPath: [],\r\n        };\r\n      }\r\n\r\n      axiosInstance\r\n        .post(\"projonline/signup\", userObject, {\r\n          headers: {\r\n            token:\r\n              \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          setOpenDialog(true);\r\n          setTimeout(() => {\r\n            setMsg(res.data.msg);\r\n            setVariant(res.data.variant);\r\n            setOpen(true);\r\n          }, 2000);\r\n\r\n          setTimeout(() => {\r\n            setOpenDialog(false);\r\n            setOpen(false);\r\n            props.history.push({ pathname: \"/updateUser\" });\r\n          }, 5000);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCompanyChange = (selectedCompany) => {\r\n    // Find the selected company object from the companies array\r\n    const selectedCompanyObj = companies.find(\r\n      (company) => company.companyName === selectedCompany\r\n    );\r\n\r\n    // Update the company category in the selected company object\r\n    if (selectedCompanyObj) {\r\n      setSelectedCompanyCategory(selectedCompanyObj.companyCategory);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Content Wrapper. Contains page content */}\r\n      <div className=\"content-wrapper\">\r\n        {/* Content Header (Page header) */}\r\n        <div className=\"content-header\">\r\n          <section className=\"content-header\">\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row mb-2\">\r\n                <div className=\"col-sm-6\">\r\n                  <h1>Add New user</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /.container-fluid */}\r\n          </section>\r\n        </div>\r\n        {/* /.content-header */}\r\n        {/* Main content */}\r\n        <section className=\"content\">\r\n          <div className=\"container-fluid\">\r\n            <form onSubmit={onSubmit} enctype=\"multipart/form-data\">\r\n              <Row className=\"mb-3\">\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Name</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => setField(\"name\", e.target.value)}\r\n                    value={form.name}\r\n                    className=\"col-md-9\"\r\n                    type=\"text\"\r\n                    isInvalid={!!errors.name}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.name}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Username</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => setField(\"username\", e.target.value)}\r\n                    value={form.username}\r\n                    className=\"col-md-9\"\r\n                    type=\"text\"\r\n                    isInvalid={!!errors.username}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.username}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Email</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => setField(\"email\", e.target.value)}\r\n                    value={form.email}\r\n                    className=\"col-md-9\"\r\n                    type=\"text\"\r\n                    isInvalid={!!errors.email}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.email}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Company</Form.Label>\r\n\r\n                  {/* onChange={(e) => handleCompanyChange(e.target.value)} */}\r\n                  <Form.Control\r\n                    onChange={(e) => {\r\n                      setField(\"company\", e.target.value);\r\n                      handleCompanyChange(e.target.value);\r\n                    }}\r\n                    value={form.company}\r\n                    className=\"col-md-9\"\r\n                    as=\"select\"\r\n                    defaultValue=\"Choose...\"\r\n                    isInvalid={!!errors.company}\r\n                  >\r\n                    <option>Choose...</option>\r\n                    {companies.map((opt) => (\r\n                      <option value={opt.companyName} key={opt.companyName}>\r\n                        {opt.companyName}\r\n                      </option>\r\n                    ))}\r\n                  </Form.Control>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.company}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>User Division</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => setField(\"userDiv\", e.target.value)}\r\n                    value={form.userDiv}\r\n                    className=\"col-md-9\"\r\n                    as=\"select\"\r\n                    defaultValue=\"Choose...\"\r\n                    isInvalid={!!errors.userDiv}\r\n                    disabled={form.company !== \"Mobitel\" ? true : false}\r\n                  >\r\n                    <option value=\"Choose...\">Choose...</option>\r\n                    <option>Planning_Radio</option>\r\n                    <option>Planning_Core</option>\r\n                    <option>Planning_TX</option>\r\n                    <option>Planning_IBS</option>\r\n                    <option>Planning_WiFi</option>\r\n                    <option>Project_Radio</option>\r\n                    <option>Project_Core</option>\r\n                    <option>Project_TX</option>\r\n                    <option>Project_IBS</option>\r\n                    <option>Project_WiFi</option>\r\n                  </Form.Control>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.userDiv}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Mobile No</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) => setField(\"mobileNo\", e.target.value)}\r\n                    value={form.mobileNo}\r\n                    className=\"col-md-9\"\r\n                    type=\"number\"\r\n                    isInvalid={!!errors.mobileNo}\r\n                  />\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.mobileNo}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Visibility Based On</Form.Label>\r\n                  <Form.Control\r\n                    onChange={(e) =>\r\n                      setField(\"visbilityBasedOn\", e.target.value)\r\n                    }\r\n                    value={\r\n                      form.company !== \"Mobitel\"\r\n                        ? \"company\"\r\n                        : form.visbilityBasedOn\r\n                    }\r\n                    className=\"col-md-9\"\r\n                    as=\"select\"\r\n                    defaultValue=\"Choose...\"\r\n                    isInvalid={!!errors.visbilityBasedOn}\r\n                    disabled={form.company !== \"Mobitel\" ? true : false}\r\n                  >\r\n                    <option>{selectedCompanyCategory}</option>\r\n\r\n                    <option value=\"Admin\">Admin</option>\r\n                    <option value=\"Planning\">Planning</option>\r\n                    <option value=\"Project_Div_Head\">Project_Div_Head</option>\r\n                    <option value=\"Project_PM\">Project_PM</option>\r\n                    <option value=\"Project_TO\">Project_TO</option>\r\n                    <option value=\"Project_Coor\">Project_Coor</option>\r\n                    <option value=\"Subcon\">Subcon</option>\r\n                    <option value=\"Optimization\">Optimization</option>\r\n                  </Form.Control>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.visbilityBasedOn}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Project Coordinator</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    onChange={(e) =>\r\n                      setField(\"projectCoordinator\", e.target.value)\r\n                    }\r\n                    value={form.projectCoordinator}\r\n                    className=\"col-md-9\"\r\n                    defaultValue=\"Choose...\"\r\n                    isInvalid={!!errors.visbilityBasedOn}\r\n                    disabled={form.company !== \"Mobitel\" ? true : false}\r\n                  >\r\n                    <option value=\"1\">Choose...</option>\r\n                    {users\r\n                      .filter((obj) => obj.isProjectCoordinator === true)\r\n                      .map((opt) => (\r\n                        <option value={opt._id}>{opt.name}</option>\r\n                      ))}\r\n                  </Form.Control>\r\n\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.projectCoordinator}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Is Project Coordinator</Form.Label>\r\n                  <Form.Check\r\n                    onChange={(e) =>\r\n                      setField(\r\n                        \"isProjectCoordinator\",\r\n                        !form.isProjectCoordinator\r\n                      )\r\n                    }\r\n                    value={form.isProjectCoordinator}\r\n                    checked={form.isProjectCoordinator}\r\n                    className=\"col-md-9\"\r\n                    id=\"custom-switch-4\"\r\n                    type=\"switch\"\r\n                    disabled={form.company !== \"Mobitel\" ? true : false}\r\n                  />\r\n                </Form.Group>\r\n              </Row>\r\n\r\n              <Row className=\"mb-3\">\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Admin Rights</Form.Label>\r\n                  <Form.Check\r\n                    onChange={(e) => {\r\n                      setField(\"adminRights\", !adminRights); // Update the form state\r\n                      setAdminRights(!adminRights); // Update the switch state\r\n                    }}\r\n                    value={adminRights} // Use adminRights here\r\n                    checked={adminRights} // Use adminRights here\r\n                    className=\"col-md-9\"\r\n                    id=\"custom-switch-1\"\r\n                    type=\"switch\"\r\n                    // disabled={form.company !== \"Mobitel\"}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Active Status</Form.Label>\r\n                  <Form.Check\r\n                    onChange={(e) => setActiveStatus(!activeStatus)} // Toggle the switch state\r\n                    value={activeStatus} // Use activeStatus here\r\n                    checked={activeStatus} // Use activeStatus here\r\n                    className=\"col-md-9\"\r\n                    id=\"custom-switch-2\"\r\n                    type=\"switch\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>User Can Assign For Task</Form.Label>\r\n                  <Form.Check\r\n                    onChange={(e) =>\r\n                      setUserCanAssignForTask(!userCanAssignForTask)\r\n                    } // Toggle the switch state\r\n                    value={userCanAssignForTask} // Use userCanAssignForTask here\r\n                    checked={userCanAssignForTask} // Use userCanAssignForTask here\r\n                    className=\"col-md-9\"\r\n                    id=\"custom-switch-3\"\r\n                    type=\"switch\"\r\n                    // disabled={form.company !== \"Mobitel\"}\r\n                  />\r\n                </Form.Group>\r\n              </Row>\r\n\r\n              <Row>\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Verification by (Level 1)</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    className=\"col-md-9\"\r\n                    onChange={(e) =>\r\n                      setField(\"verificationOneId\", e.target.value)\r\n                    }\r\n                    value={form.verificationOneId}\r\n                    isInvalid={!!errors.verificationOneId}\r\n                    defaultValue=\"Choose...\"\r\n                    disabled={userCanAssignForTask === true ? false : true}\r\n                  >\r\n                    <option value=\"1\">Choose...</option>\r\n                    {users.map((opt) => (\r\n                      <option value={opt._id}>{opt.name}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.verificationOneId}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Verification by (Level 2)</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    className=\"col-md-9\"\r\n                    onChange={(e) =>\r\n                      setField(\"verificationTwoId\", e.target.value)\r\n                    }\r\n                    value={form.verificationTwoId}\r\n                    isInvalid={!!errors.verificationTwoId}\r\n                    defaultValue=\"Choose...\"\r\n                    disabled={userCanAssignForTask === true ? false : true}\r\n                  >\r\n                    <option value=\"1\">Choose...</option>\r\n                    <option value=\"2\">Not Applicable</option>\r\n                    {users.map((opt) => (\r\n                      <option value={opt._id}>{opt.name}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.verificationTwoId}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Col}>\r\n                  <Form.Label>Approval by</Form.Label>\r\n                  <Form.Control\r\n                    as=\"select\"\r\n                    className=\"col-md-9\"\r\n                    onChange={(e) => setField(\"approvalId\", e.target.value)}\r\n                    value={form.approvalId}\r\n                    isInvalid={!!errors.approvalId}\r\n                    defaultValue=\"Choose...\"\r\n                    disabled={userCanAssignForTask === true ? false : true}\r\n                  >\r\n                    <option value=\"1\">Choose...</option>\r\n                    {users.map((opt) => (\r\n                      <option value={opt._id}>{opt.name}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                  <Form.Control.Feedback type=\"invalid\">\r\n                    {errors.approvalId}\r\n                  </Form.Control.Feedback>\r\n                </Form.Group>\r\n              </Row>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Add a New User\r\n              </Button>\r\n            </form>\r\n          </div>\r\n          {/* /.container-fluid */}\r\n        </section>\r\n        {/* /.content */}\r\n      </div>\r\n\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={handleClose}\r\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n      >\r\n        <Alert onClose={handleClose} severity={variant} sx={{ width: \"100%\" }}>\r\n          {msg}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Dialog\r\n        open={openDialog}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogContent>\r\n          <Box sx={{ display: \"flex\" }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(AddSpecificUser);\r\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n"],"names":["Alert","React","props","ref","elevation","variant","withRouter","users","setUsers","useState","companies","setCompanies","msg","setMsg","setVariant","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","openDialog","setOpenDialog","activeStatus","setActiveStatus","userCanAssignForTask","setUserCanAssignForTask","adminRights","setAdminRights","selectedCompanyCategory","setSelectedCompanyCategory","setField","field","value","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","filter","obj","company","companyName","companys","isProjectCoordinator","verificationOneId","verificationTwoId","approvalId","catch","err","console","log","handleClose","event","reason","className","onSubmit","e","preventDefault","newErrors","name","username","email","projectCoordinator","userDiv","visbilityBasedOn","mobileNo","findFormErrors","Object","keys","length","userObject","approvalPath","element","find","item","_id","companyCategory","post","setTimeout","history","push","pathname","error","enctype","as","Col","onChange","target","type","isInvalid","selectedCompany","selectedCompanyObj","handleCompanyChange","defaultValue","map","opt","disabled","checked","id","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","display","module","exports","self","FormData","window"],"sourceRoot":""}