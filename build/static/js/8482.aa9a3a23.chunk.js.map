{"version":3,"file":"static/js/8482.aa9a3a23.chunk.js","mappings":"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","sources":["components/ApprovedHandoverChangesBody.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport style from './style.css'\nimport { Select, MenuItem } from '@mui/material';\nimport { Button, Modal, Form, Row, Col } from 'react-bootstrap';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport Dialog from '@mui/material/Dialog';\nimport Box from '@mui/material/Box';\nimport DialogContent from '@mui/material/DialogContent';\nimport CircularProgress from '@mui/material/CircularProgress'\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nfunction ApprovedHandoverChangesBody() {\n\n    let [items, setItems] = useState([])\n    let [item, setItem] = useState([])\n    let [properties, setProperties] = useState([])\n    let [headerProperties, setHeaderProperties] = useState([])\n    let [open, setOpen] = useState(false)\n    let [severity, setSeverity] = useState(\"\")\n    let [alart, setAlart] = useState(\"\")\n    let [errors, setErrors] = useState({})\n    let [openDialog, setOpenDialog] = useState(false);\n\n    const handleChange = (e, index) => {\n        setProperties({ ...properties, [index]: e.target.value });\n    };\n\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = (row) => {\n        setItem(row)\n        setProperties(row.newProperties)\n        setHeaderProperties(row.headerProperties)\n        setShow(true);\n    }\n    const axiosInstance = axios.create({\n        baseURL: process.env.REACT_APP_BACKEND_URL,\n    })\n\n    useEffect(() => {\n        getData()\n    }, [])\n\n   \n\n\n    const getData = () => {\n        setOpenDialog(true)\n        axiosInstance.get('projonline/allhandoverchanges/approved', {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n            setItems(res.data)\n            setOpenDialog(false)\n            //console.log(res.data)\n            return\n        }).catch(err => {\n            console.log(err)\n        })\n    };\n\n    const alertClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const handleSubmit = () => {\n            \n            axiosInstance.put(`projonline/updatehandoverchanges/${item._id}`, {\n                status: 'Change Acknowledged'\n            }, {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n                axiosInstance.put(`projonline/update/${item.taskRefID}`, {\n                    taskObject: {\n                    },\n                    taskHistory: {\n                        taskStatus: 'Change Acknowledged',\n                    },\n\n                }, {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n                    setOpen(true)\n                    setSeverity(\"success\")\n                    setAlart('Change Acknowledged')\n                    setShow(false)\n                    getData()\n                    return\n                }).catch(err => {\n                    console.log(err)\n                    setOpen(true)\n                    setSeverity(\"error\")\n                    setAlart(\"Error occured\")\n                })\n            }).catch(err => {\n                console.log(err)\n            })\n        \n    }\n\n   \n\n \n\n\n    const columns = [\n        { field: 'taskRef', headerName: 'TaskID', width: 250 },\n        { field: 'siteID', headerName: 'SiteID', width: 150 },\n        { field: 'siteName', headerName: 'Site Name', width: 175 },\n        { field: 'project', headerName: 'Project', width: 250 },\n        { field: 'subProject', headerName: 'Sub Project', width: 250 },\n        {\n            field: \"Recently Approved Handover Changes\", width: 250, align: 'center',\n            renderCell: (cellValues) => {\n                return (\n                    <Button\n                        variant=\"primary\"\n                        style={{ width: 100 }}\n                        onClick={() => handleShow(cellValues.row)}\n                    >\n                        Show\n                    </Button>\n                );\n            }\n        }\n\n    ];\n\n    return (\n        <div>\n            {/* Content Wrapper. Contains page content */}\n            <div className=\"content-wrapper\">\n\n                <div className=\"content-header\">\n                    <section className=\"content-header\">\n                        <div className=\"container-fluid\">\n                            <div className=\"row mb-2\">\n                                <div className=\"col-sm-6\">\n                                    <h1>Recently Approved Handover Changes</h1>\n                                </div>\n                            </div>\n                        </div>{/* /.container-fluid */}\n                    </section>\n                </div>\n\n                <div style={{ height: 610, width: '100%' }}>\n                    <DataGrid\n                        getRowId={(item) => item._id}\n                        rows={items}\n                        columns={columns}\n                        pageSize={15}\n                        rowsPerPageOptions={[15]}\n                        rowHeight={30}\n                        headerHeight={40}\n                        components={{ Toolbar: GridToolbar, }}\n                    />\n\n                </div>\n\n\n            </div>\n            <Modal show={show} onHide={handleClose} size=\"lg\" animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Handover</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={handleClose}>\n                        {\n                            headerProperties?.map((headerProperty, index) => {\n                                if (index < 3) {\n                                    return (\n                                        <Row>\n                                            <Form.Group className=\"m-2\" controlId=\"refid\" as={Col}>\n                                                <Form.Label>{headerProperty}</Form.Label>\n                                                <Form.Control\n                                                    className='mr-1 ml-1'\n                                                    value={properties[index]}\n                                                    onChange={(e) => handleChange(e, index)}\n                                                    type=\"text\"\n                                                    readOnly\n                                                />\n                                            </Form.Group>\n                                        </Row>\n                                    )\n                                } else {\n                                    return (\n                                        <Row>\n                                            <Form.Group className=\"m-2\" controlId=\"refid\" as={Col}>\n                                                <Form.Label>{headerProperty}</Form.Label>\n                                                <div className=\"d-flex flex-row\">\n                                                    <Form.Control\n                                                        className='mr-1 ml-1'\n                                                        value={item.existingProperties[index]}\n                                                        type=\"text\"\n                                                        readOnly\n                                                    />\n                                                    <Form.Control\n                                                        className={`mr-1 ml-1 ${item.existingProperties[index] != properties[index] ? 'text-danger' : \"\"}`}\n                                                        value={properties[index]}\n                                                        onChange={(e) => handleChange(e, index)}\n                                                        type=\"text\"\n                                                        readOnly\n                                                    />\n                                                </div>\n                                            </Form.Group>\n                                        </Row>\n                                    )\n                                }\n                                    \n                            })}\n                            {item.taskStatus && <Row>\n                            <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\n                                <Form.Label>Requested Status</Form.Label>\n                                <Form.Control  type=\"text\" rows={3} required value={item.taskStatus} readonly />\n                            </Form.Group>\n                        </Row>}\n                        <Row>\n                            <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\n                                <Form.Label>Reason for the change request</Form.Label>\n                                <Form.Control as=\"textarea\" rows={3} required value={item.comment} readonly />\n                            </Form.Group>\n                        </Row>\n                        <Row>\n                            <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\n                                <Form.Label>Approve Comment</Form.Label>\n                                <Form.Control as=\"textarea\" rows={3} readonly value={item.approveComment}  />\n                            </Form.Group>\n                        </Row>\n                       \n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleSubmit}>\n                    Acknowledge\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Snackbar open={open} autoHideDuration={6000} onClose={alertClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\n                <Alert onClose={alertClose} severity={severity} sx={{ width: '100%' }}>\n                    {alart}\n                </Alert>\n            </Snackbar>\n\n            <Dialog\n                open={openDialog}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogContent>\n                    <Box sx={{ display: 'flex' }}>\n                        <CircularProgress />\n                    </Box>\n\n\n                </DialogContent>\n            </Dialog>\n        </div>\n\n    );\n}\n\nexport default withRouter(ApprovedHandoverChangesBody)"],"names":["Alert","React","props","ref","elevation","variant","withRouter","useState","items","setItems","item","setItem","properties","setProperties","headerProperties","setHeaderProperties","open","setOpen","severity","setSeverity","alart","setAlart","openDialog","setOpenDialog","handleChange","e","index","target","value","show","setShow","handleClose","axiosInstance","axios","baseURL","process","useEffect","getData","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","catch","err","console","log","alertClose","event","reason","columns","field","headerName","width","align","renderCell","cellValues","style","onClick","row","newProperties","className","height","getRowId","_id","rows","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","onHide","size","animation","closeButton","onSubmit","map","headerProperty","controlId","as","Col","onChange","type","readOnly","existingProperties","taskStatus","required","readonly","comment","approveComment","put","status","taskRefID","taskObject","taskHistory","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","display"],"sourceRoot":""}