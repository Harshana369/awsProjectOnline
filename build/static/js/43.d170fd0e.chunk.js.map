{"version":3,"file":"static/js/43.d170fd0e.chunk.js","mappings":"kTAYA,MAAMA,EAAQC,EAAAA,YAAiB,SAAeC,EAAOC,GACnD,OAAO,SAAC,IAAQ,CAACC,UAAW,EAAGD,IAAKA,EAAKE,QAAQ,YAAaH,GAChE,IAoTA,SAAeI,EAAAA,EAAAA,KAlTf,SAAsCJ,GACpC,IAAKK,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,KACpCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,KAClCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,IACjC,MAAMO,EAAgBC,IAAAA,OAAa,CACjCC,QAASC,wCAGX,IAAKC,EAAMC,IAAWZ,EAAAA,EAAAA,UAAS,CAAC,IAC3Ba,EAAQC,IAAad,EAAAA,EAAAA,UAAS,CAAC,IAC/Be,EAAMC,IAAWhB,EAAAA,EAAAA,WAAS,IAC1BiB,EAAYC,IAAiBlB,EAAAA,EAAAA,WAAS,IAyB3CmB,EAAAA,EAAAA,YAAU,KAERpB,EAAS,CAAC,CAAEqB,KAAM3B,EAAM4B,SAASC,KAAKC,IAAIC,uBAAuBJ,QACjElB,EAAa,CACX,CAAEuB,YAAahC,EAAM4B,SAASC,KAAKC,IAAIG,eAAeD,eAExDb,EAAQ,CACNe,QAASlC,EAAM4B,SAASC,KAAKC,IAAII,QACjCC,OAAQnC,EAAM4B,SAASC,KAAKC,IAAIK,OAChCC,SAAUpC,EAAM4B,SAASC,KAAKC,IAAIM,SAIlCC,gBAAiBrC,EAAM4B,SAASC,KAAKC,IAAIO,gBACzCN,uBACE/B,EAAM4B,SAASC,KAAKC,IAAIC,uBAAuBJ,KAEjDM,eAAgBjC,EAAM4B,SAASC,KAAKC,IAAIG,eAAeD,aAGvD,GACD,IAEH,MA0DMM,EAAc,CAACC,EAAOC,KACX,cAAXA,GAIJjB,GAAQ,EAAM,EAGhB,OACE,4BAEE,iBAAKkB,UAAU,kBAAiB,WAE9B,gBAAKA,UAAU,iBAAgB,UAC7B,oBAASA,UAAU,iBAAgB,UACjC,gBAAKA,UAAU,kBAAiB,UAC9B,0BACE,0BAAI,YAAUvB,EAAKgB,QAAQ,gBAQnC,oBAASO,UAAU,UAAS,UAC1B,gBAAKA,UAAU,kBAAiB,UAC9B,UAAC,IAAI,YACH,UAAC,IAAG,YACF,UAAC,UAAU,CAACC,GAAIC,EAAAA,EAAKC,GAAI,EAAE,WACzB,SAAC,UAAU,UAAC,aACZ,SAAC,YAAY,CACXC,UAAQ,EACRC,MAAO5B,EAAKiB,OACZM,UAAU,WACVM,KAAK,OACLC,YAAY,gBACZC,YAAa7B,EAAOe,UAEtB,SAAC,qBAAqB,CAACY,KAAK,UAAS,SAClC3B,EAAOe,aAIZ,UAAC,UAAU,CAACO,GAAIC,EAAAA,EAAKC,GAAI,EAAE,WACzB,SAAC,UAAU,UAAC,eACZ,SAAC,YAAY,CACXC,UAAQ,EACRC,MAAO5B,EAAKkB,SACZW,KAAK,OACLC,YAAY,kBACZC,YAAa7B,EAAOgB,YAEtB,SAAC,qBAAqB,CAACW,KAAK,UAAS,SAClC3B,EAAOgB,eAIZ,SAAC,UAAU,CAACM,GAAIC,EAAAA,EAAKC,GAAI,QAG3B,UAAC,IAAG,YACF,UAAC,UAAU,CAACF,GAAIC,EAAAA,EAAKC,GAAI,EAAE,WACzB,SAAC,UAAU,UAAC,4BACZ,UAAC,YAAY,CACXC,UAAQ,EACRC,MAAO5B,EAAKmB,gBACZK,GAAG,SACHQ,aAAa,YACbD,YAAa7B,EAAOiB,gBAAgB,WAEpC,4BAAQ,eACR,4BAAQ,mBACR,4BAAQ,kBACR,4BAAQ,gBACR,4BAAQ,iBACR,4BAAQ,qBAEV,SAAC,qBAAqB,CAACU,KAAK,UAAS,SAClC3B,EAAOiB,mBAEV,SAAC,UAAU,CAACK,GAAIC,EAAAA,EAAKC,GAAI,QAG3B,UAAC,UAAU,CAACF,GAAIC,EAAAA,EAAKC,GAAI,EAAE,WACzB,SAAC,UAAU,UAAC,8BACZ,UAAC,YAAY,CACXC,UAAQ,EACRH,GAAG,SACHI,MAAO5B,EAAKa,uBACZmB,aAAa,YACbD,YAAa7B,EAAOW,uBAAuB,WAE3C,4BAAQ,cACP1B,EAAM8C,KAAKC,IACV,mBAAQN,MAAOM,EAAIC,IAAI,SAAED,EAAIzB,aAGjC,SAAC,qBAAqB,CAACoB,KAAK,UAAS,SAClC3B,EAAOW,6BAIZ,SAAC,UAAU,CAACW,GAAIC,EAAAA,QAGlB,SAAC,IAAG,CAACF,UAAU,UA0Bf,SAAC,IAAG,WACF,UAAC,UAAU,CAACC,GAAIC,EAAAA,EAAKC,GAAI,EAAE,WACzB,SAAC,UAAU,UAAC,cACZ,SAAC,YAAY,CACXU,SAAWC,IACTC,OAjPJC,EAiPa,uBAjPNX,EAiP8BS,EAAEG,OAAOZ,MAhP5D3B,EAAQ,IACHD,EACH,CAACuC,GAAQX,SAEL1B,EAAOqC,IACXpC,EAAU,IACLD,EACH,CAACqC,GAAQ,QARA,IAACA,EAAOX,CAkPJ,EACDJ,GAAG,WACHiB,KAAM,EACNb,MAAO5B,EAAK0C,qBACZZ,YAAY,gEACZC,YAAa7B,EAAOwC,wBAEtB,SAAC,qBAAqB,CAACb,KAAK,UAAS,SAClC3B,EAAOwC,6BAKd,SAAC,IAAG,KACJ,SAAC,IAAM,CAACzD,QAAQ,UAAU0D,QAlNpBN,IAChBA,EAAEO,iBAEF,MAAMC,EArCe,MACrB,MAAM,qBAAEH,GAAyB1C,EAC3B6C,EAAY,CAAC,EAMnB,OAJKH,GAAiD,KAAzBA,IAC3BG,EAAUH,qBACR,sFAEGG,CAAS,EA6BEC,GAElB,GAAIC,OAAOC,KAAKH,GAAWI,OAAS,EAElC9C,EAAU0C,OACL,CACL,MAAMK,EAAa,CACjBC,YAAa,eAKfvD,EACGwD,IACC,qBAAuBtE,EAAM4B,SAASC,KAAKC,IAAIuB,IAC/C,CACEe,aACAG,YAAa,CACXF,YAAa,cACbG,QAAStD,EAAK0C,uBAGlB,CACEa,QAAS,CACPC,MACE,UACAC,KAAKC,MAAMC,aAAaC,QAAQ,SAASC,eAIhDC,MAAMC,IAGLxD,GAAc,GAEdyD,YAAW,KACTrE,EAASoE,EAAIpD,KAAKjB,OAClBD,EAAYsE,EAAIpD,KAAKnB,UACrBa,GAAQ,EAAK,GACZ,KAEH2D,YAAW,KACTzD,GAAc,GACdF,GAAQ,GACRvB,EAAMmF,QAAQC,KAAK,CACjBC,SAAU,qBACV,GACD,IAAK,IAETC,OAAOC,IACNC,QAAQC,IAAIF,EAAM,GAExB,GA2JsD,SAAC,+BAUrD,SAAC,IAAQ,CACPjE,KAAMA,EACNoE,iBAAkB,IAClBC,QAASrD,EACTsD,aAAc,CAAEC,SAAU,MAAOC,WAAY,UAAW,UAExD,SAAChG,EAAK,CAAC6F,QAASrD,EAAa5B,SAAUA,EAAUqF,GAAI,CAAEC,MAAO,QAAS,SACpEpF,OAGL,SAAC,IAAM,CACLU,KAAME,EACNmE,QAASrD,EACT,kBAAgB,qBAChB,mBAAiB,2BAA0B,UAE3C,SAAC,IAAa,WACZ,SAAC,IAAG,CAACyD,GAAI,CAAEE,QAAS,QAAS,UAC3B,SAAC,IAAgB,YAM7B,G","sources":["components/PendingOnairSpecificTaskBody.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport XLSX from \"xlsx\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Box from \"@mui/material/Box\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction PendingOnairSpecificTaskBody(props) {\n  let [users, setUsers] = useState([]);\n  let [companies, setCompanies] = useState([]);\n  let [severity, setSeverity] = useState(\"\");\n  let [alart, setAlart] = useState(\"\");\n  const axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL,\n  });\n\n  let [form, setForm] = useState({});\n  let [errors, setErrors] = useState({});\n  let [open, setOpen] = useState(false);\n  let [openDialog, setOpenDialog] = useState(false);\n\n  let setField = (field, value) => {\n    setForm({\n      ...form,\n      [field]: value,\n    });\n    if (!!errors[field])\n      setErrors({\n        ...errors,\n        [field]: null,\n      });\n  };\n\n  const findFormErrors = () => {\n    const { taskCommencedComment } = form;\n    const newErrors = {};\n    // name errors\n    if (!taskCommencedComment || taskCommencedComment === \"\")\n      newErrors.taskCommencedComment =\n        \"cannot be blank!   Note-Please comment the actual On-Air date if not On-Air today \";\n\n    return newErrors;\n  };\n\n  useEffect(() => {\n    // console.log(props.location.data.row)\n    setUsers([{ name: props.location.data.row.assignedMobitelOfficer.name }]);\n    setCompanies([\n      { companyName: props.location.data.row.assignedSubcon.companyName },\n    ]);\n    setForm({\n      taskRef: props.location.data.row.taskRef,\n      siteID: props.location.data.row.siteID,\n      siteName: props.location.data.row.siteName,\n      // 'plannedTaskStartDate':props.location.data.row.plannedTaskStartDate.split('T')[0],\n      //                 'actualTaskStartDate':props.location.data.row.taskHistory.find(x=>x.taskStatus==='Task commenced').performedDate.split('T')[0],\n      // 'targetTaskComDate':props.location.data.row.targetTaskComDate.split('T')[0],\n      taskAssignedDiv: props.location.data.row.taskAssignedDiv,\n      assignedMobitelOfficer:\n        props.location.data.row.assignedMobitelOfficer.name,\n      // 'workScope':props.location.data.row.workScope,\n      assignedSubcon: props.location.data.row.assignedSubcon.companyName,\n      // 'taskassignedSubconOfficer': props.location.data.row.taskassignedSubconOfficer,\n      // 'taskassignedMobileNo': props.location.data.row.taskassignedMobileNo\n    });\n  }, []);\n\n  const onAccept = (e) => {\n    e.preventDefault();\n\n    const newErrors = findFormErrors();\n    // Conditional logic:\n    if (Object.keys(newErrors).length > 0) {\n      // We got errors!\n      setErrors(newErrors);\n    } else {\n      const taskObject = {\n        onairStatus: \"Site On-Air\",\n      };\n\n      // console.log(form.assignedMobitelOfficer)\n      // console.log(\"Jana\")\n      axiosInstance\n        .put(\n          \"projonline/update/\" + props.location.data.row._id,\n          {\n            taskObject,\n            taskHistory: {\n              onairStatus: \"Site On-Air\",\n              comment: form.taskCommencedComment,\n            },\n          },\n          {\n            headers: {\n              token:\n                \"Bearer \" +\n                JSON.parse(localStorage.getItem(\"user\")).accessToken,\n            },\n          }\n        )\n        .then((res) => {\n          // console.log(res.data)\n\n          setOpenDialog(true);\n          // smsFetch(form.taskassignedMobileNo)\n          setTimeout(() => {\n            setAlart(res.data.alart);\n            setSeverity(res.data.severity);\n            setOpen(true);\n          }, 2000);\n\n          setTimeout(() => {\n            setOpenDialog(false);\n            setOpen(false);\n            props.history.push({\n              pathname: \"/pendingOnairTask\",\n            });\n          }, 5000);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {/* Content Wrapper. Contains page content */}\n      <div className=\"content-wrapper\">\n        {/* Content Header (Page header) */}\n        <div className=\"content-header\">\n          <section className=\"content-header\">\n            <div className=\"container-fluid\">\n              <div>\n                <h1>Task ID: {form.taskRef} </h1>\n              </div>\n            </div>\n            {/* /.container-fluid */}\n          </section>\n        </div>\n        {/* /.content-header */}\n        {/* Main content */}\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <Form>\n              <Row>\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Site ID</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.siteID}\n                    className=\"col-md-9\"\n                    type=\"text\"\n                    placeholder=\"Enter site ID\"\n                    isInvalid={!!errors.siteID}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.siteID}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Site Name</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.siteName}\n                    type=\"text\"\n                    placeholder=\"Enter site Name\"\n                    isInvalid={!!errors.siteName}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.siteName}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} sm={3}></Form.Group>\n              </Row>\n\n              <Row>\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Task Assigned Division</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.taskAssignedDiv}\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.taskAssignedDiv}\n                  >\n                    <option>Choose...</option>\n                    <option>Project_Radio</option>\n                    <option>Project_Core</option>\n                    <option>Project_TX</option>\n                    <option>Project_IBS</option>\n                    <option>Project_WiFi</option>\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskAssignedDiv}\n                  </Form.Control.Feedback>\n                  <Form.Group as={Col} sm={3}></Form.Group>\n                </Form.Group>\n\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Assigned Mobitel Officer</Form.Label>\n                  <Form.Control\n                    disabled\n                    as=\"select\"\n                    value={form.assignedMobitelOfficer}\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.assignedMobitelOfficer}\n                  >\n                    <option>Choose...</option>\n                    {users.map((opt) => (\n                      <option value={opt._id}>{opt.name}</option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.assignedMobitelOfficer}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}></Form.Group>\n              </Row>\n\n              <Row className=\"mb-3\">\n                {/* <Form.Group as={Col} >\n                        {/* <Form.Label>Assigned subcontractor</Form.Label>\n                        <Form.Control disabled value={form.assignedSubcon} as=\"select\" defaultValue=\"Choose...\" isInvalid={ !!errors.assignedSubcon } >\n                            <option>Choose...</option>\n                            {companies.map(opt => (\n                                    <option value={opt._id}>{opt.companyName}</option>\n                            ))}\n                        </Form.Control>\n                        <Form.Control.Feedback type='invalid'>\n                                { errors.assignedSubcon }\n                            </Form.Control.Feedback>\n                        </Form.Group> */}\n\n                {/* <Form.Group as={Col} >\n                        <Form.Label>Handover Details</Form.Label>\n                            <br />\n                                <Button onClick={downloadHandover} variant=\"primary\" type=\"button\">\n                                    Click to Download\n                                </Button>\n                        </Form.Group> */}\n\n                {/* <Form.Group as={Col} >\n                        </Form.Group> */}\n              </Row>\n\n              <Row>\n                <Form.Group as={Col} sm={6}>\n                  <Form.Label>Comments</Form.Label>\n                  <Form.Control\n                    onChange={(e) =>\n                      setField(\"taskCommencedComment\", e.target.value)\n                    }\n                    as=\"textarea\"\n                    rows={2}\n                    value={form.taskCommencedComment}\n                    placeholder=\"Enter your comments or actual On-Air date if not On-Air today\"\n                    isInvalid={!!errors.taskCommencedComment}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskCommencedComment}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n\n              <Row></Row>\n              <Button variant=\"primary\" onClick={onAccept}>\n                Site On-Air Now\n              </Button>\n            </Form>\n          </div>\n          {/* /.container-fluid */}\n        </section>\n        {/* /.content */}\n      </div>\n\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n      >\n        <Alert onClose={handleClose} severity={severity} sx={{ width: \"100%\" }}>\n          {alart}\n        </Alert>\n      </Snackbar>\n      <Dialog\n        open={openDialog}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogContent>\n          <Box sx={{ display: \"flex\" }}>\n            <CircularProgress />\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default withRouter(PendingOnairSpecificTaskBody);\n"],"names":["Alert","React","props","ref","elevation","variant","withRouter","users","setUsers","useState","companies","setCompanies","severity","setSeverity","alart","setAlart","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","openDialog","setOpenDialog","useEffect","name","location","data","row","assignedMobitelOfficer","companyName","assignedSubcon","taskRef","siteID","siteName","taskAssignedDiv","handleClose","event","reason","className","as","Col","sm","disabled","value","type","placeholder","isInvalid","defaultValue","map","opt","_id","onChange","e","setField","field","target","rows","taskCommencedComment","onClick","preventDefault","newErrors","findFormErrors","Object","keys","length","taskObject","onairStatus","put","taskHistory","comment","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","setTimeout","history","push","pathname","catch","error","console","log","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","width","display"],"sourceRoot":""}