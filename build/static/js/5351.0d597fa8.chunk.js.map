{"version":3,"file":"static/js/5351.0d597fa8.chunk.js","mappings":"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","sources":["components/CompletedVenderTaskBody.jsx","../node_modules/clsx/dist/clsx.m.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport style from \"./style.css\";\r\nimport { Button } from \"@mui/material\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport Box from \"@mui/material/Box\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport jsPDF from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\nimport \"jspdf-autotable\";\r\n\r\nfunction CompletedVenderTaskBody(props) {\r\n  let [openDialog, setOpenDialog] = useState(false);\r\n  let [items, setItems] = useState([]);\r\n  const axiosInstance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n  });\r\n  let [companies, setCompanies] = useState([]);\r\n  useEffect(() => {\r\n    setOpenDialog(true);\r\n    axiosInstance\r\n      .get(\"projonline/gettasks/alreadyCompletedTaskVender\", {\r\n        headers: {\r\n          token:\r\n            \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        console.log(res.data.tasks);\r\n        setItems(res.data.tasks);\r\n        setOpenDialog(false);\r\n        return;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  // To get user is Subcon or Mobitel\r\n  const userType = JSON.parse(localStorage.getItem(\"user\")).visbilityBasedOn;\r\n  console.log(userType);\r\n\r\n  const columns = [\r\n    { field: \"taskRef\", headerName: \"Task ID\", width: 300 },\r\n    { field: \"siteID\", headerName: \"Site ID\", width: 130 },\r\n    {\r\n      field: \"companyName\",\r\n      headerName: \"Subcon / Vender\",\r\n      width: 210,\r\n      valueGetter: (params) => params.row.assignedSubcon.companyName,\r\n    },\r\n    {\r\n      field: \"assignedMobitelOfficer\",\r\n      headerName: \"Assigned Officer\",\r\n      width: 205,\r\n      valueGetter: (params) => params.row.assignedMobitelOfficer.name,\r\n    },\r\n    {\r\n      field: \"Taskhandedover\",\r\n      headerName: \"Task Handover Date\",\r\n      width: 250,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp =\r\n            params.row.taskHistory[i].taskStatus === \"Task handed over\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n    {\r\n      field: \"Subconallocated\",\r\n      headerName: \"Subcon Allocated Date\",\r\n      width: 280,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp =\r\n            params.row.taskHistory[i].taskStatus === \"Subcon allocated\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n    {\r\n      field: \"Taskcommenced\",\r\n      headerName: \"Task commenced Date\",\r\n      width: 280,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp =\r\n            params.row.taskHistory[i].taskStatus === \"Task commenced\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n    {\r\n      field: \"Taskcompleted\",\r\n      headerName: \"Task completed Date\",\r\n      width: 280,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp =\r\n            params.row.taskHistory[i].taskStatus === \"Task completed\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    {\r\n      field: \"Sitecommissioned\",\r\n      headerName: \"Commissioned Date\",\r\n      width: 250,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp =\r\n            params.row.taskHistory[i].comStatus === \"Site Commissioned\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    {\r\n      field: \"PATPass\",\r\n      headerName: \"PAT Pass Date\",\r\n      width: 250,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp = params.row.taskHistory[i].patStatus === \"PAT Pass\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    {\r\n      field: \"SiteOn-Air\",\r\n      headerName: \"Site On-Air Date\",\r\n      width: 250,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp = params.row.taskHistory[i].onairStatus === \"Site On-Air\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    {\r\n      field: \"Task accepted\",\r\n      headerName: \"Task Accepted Date\",\r\n      width: 250,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp = params.row.taskHistory[i].taskStatus === \"Task accepted\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n\r\n    {\r\n      field: \"SAR Pass\",\r\n      headerName: \"Sar Pass Date\",\r\n      width: 250,\r\n      valueGetter: (params) => {\r\n        for (let i = 0; i < params.row.taskHistory.length; i++) {\r\n          const temp = params.row.taskHistory[i].sarStatus === \"SAR Pass\";\r\n\r\n          if (temp) {\r\n            const dateTimeString = params.row.taskHistory[i].performedDate;\r\n            const dateObject = new Date(dateTimeString);\r\n            const year = dateObject.getFullYear();\r\n            const month = dateObject.getMonth() + 1; // Months are zero-based, so add 1\r\n            const day = dateObject.getDate();\r\n            const formattedDate = `${year}-${month < 10 ? \"0\" : \"\"}${month}-${\r\n              day < 10 ? \"0\" : \"\"\r\n            }${day}`;\r\n            return formattedDate;\r\n          }\r\n        }\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      {/* Content Wrapper. Contains page content */}\r\n      <div className=\"content-wrapper\">\r\n        <div className=\"content-header\">\r\n          <section className=\"content-header\">\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row mb-2\">\r\n                <div className=\"col-sm-6\">\r\n                  <h1>All Completed Tasks</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /.container-fluid */}\r\n          </section>\r\n        </div>\r\n\r\n        <div style={{ height: 610, width: \"100%\" }}>\r\n          <DataGrid\r\n            getRowId={(item) => item._id}\r\n            rows={items}\r\n            columns={columns}\r\n            pageSize={15}\r\n            rowsPerPageOptions={[15]}\r\n            rowHeight={30}\r\n            headerHeight={40}\r\n            components={{ Toolbar: GridToolbar }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompletedVenderTaskBody;\r\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["props","useState","setOpenDialog","items","setItems","axiosInstance","axios","baseURL","process","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","console","log","data","tasks","catch","err","userType","visbilityBasedOn","columns","field","headerName","width","valueGetter","params","row","assignedSubcon","companyName","assignedMobitelOfficer","name","i","taskHistory","length","taskStatus","dateTimeString","performedDate","dateObject","Date","year","getFullYear","month","getMonth","day","getDate","comStatus","patStatus","onairStatus","sarStatus","className","style","height","getRowId","item","_id","rows","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","toVal","mix","k","y","str","Array","isArray","tmp","x","arguments","_assertThisInitialized","self","ReferenceError","_iterableToArray","iter","Symbol","iterator","from","_toConsumableArray","arr","arrayLikeToArray","iterableToArray","unsupportedIterableToArray","TypeError"],"sourceRoot":""}