{"version":3,"file":"static/js/7266.48fc22d1.chunk.js","mappings":"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","sources":["components/ApproveHandoverChangesBody.jsx","webpack://frontend/./src/components/style.css?15d9"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport style from \"./style.css\";\r\nimport { Select, MenuItem } from \"@mui/material\";\r\nimport { Button, Modal, Form, Row, Col } from \"react-bootstrap\";\r\nimport Snackbar from \"@mui/material/Snackbar\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport Box from \"@mui/material/Box\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nfunction ApproveHandoverChangesBody() {\r\n  let [items, setItems] = useState([]);\r\n  let [item, setItem] = useState([]);\r\n  let [properties, setProperties] = useState([]);\r\n  let [headerProperties, setHeaderProperties] = useState([]);\r\n  let [open, setOpen] = useState(false);\r\n  let [severity, setSeverity] = useState(\"\");\r\n  let [alart, setAlart] = useState(\"\");\r\n  let [comment, setComment] = useState(\"\");\r\n  let [errors, setErrors] = useState({});\r\n  let [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const handleChange = (e, index) => {\r\n    setProperties({ ...properties, [index]: e.target.value });\r\n  };\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = (row) => {\r\n    setItem(row);\r\n    setProperties(row.newProperties);\r\n    setHeaderProperties(row.headerProperties);\r\n    setComment(\"\");\r\n    setShow(true);\r\n  };\r\n  const axiosInstance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const findFormErrors = () => {\r\n    const newErrors = {};\r\n    // name errors\r\n    if (!comment || comment === \"\") newErrors.comment = \"cannot be blank!\";\r\n    console.log(newErrors);\r\n    return newErrors;\r\n  };\r\n\r\n  const getData = () => {\r\n    setOpenDialog(true);\r\n    axiosInstance\r\n      .get(\"projonline/pendinghandoverchanges\", {\r\n        headers: {\r\n          token:\r\n            \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        //console.log(res.data)\r\n        setItems(res.data);\r\n        setOpenDialog(false);\r\n        //console.log(res.data)\r\n        return;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const alertClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    const newErrors = findFormErrors();\r\n    if (Object.keys(newErrors).length > 0) {\r\n      // We got errors!\r\n      setErrors(newErrors);\r\n    } else {\r\n      var changedProperties = Object.values(properties);\r\n\r\n      axiosInstance\r\n        .put(\r\n          `projonline/updatehandoverchanges/${item._id}`,\r\n          {\r\n            approveComment: comment,\r\n            status: \"Approved\",\r\n          },\r\n          {\r\n            headers: {\r\n              token:\r\n                \"Bearer \" +\r\n                JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          axiosInstance\r\n            .put(\r\n              `projonline/update/${item.taskRefID}`,\r\n              {\r\n                taskObject: {\r\n                  properties: changedProperties,\r\n                  taskStatus: item.taskStatus,\r\n                },\r\n                taskHistory: {\r\n                  taskStatus: item.taskStatus\r\n                    ? `${item.taskStatus} approved`\r\n                    : \"Handover change approved\",\r\n                  comment: comment,\r\n                },\r\n              },\r\n              {\r\n                headers: {\r\n                  token:\r\n                    \"Bearer \" +\r\n                    JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n                },\r\n              }\r\n            )\r\n            .then((res) => {\r\n              setOpen(true);\r\n              setSeverity(\"success\");\r\n              setAlart(\r\n                item.taskStatus\r\n                  ? `${item.taskStatus} approved`\r\n                  : \"Handover change approved\"\r\n              );\r\n              setShow(false);\r\n              getData();\r\n              return;\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              setOpen(true);\r\n              setSeverity(\"error\");\r\n              setAlart(\"Error occured\");\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const handleDeny = () => {\r\n    const newErrors = findFormErrors();\r\n    if (Object.keys(newErrors).length > 0) {\r\n      // We got errors!\r\n      setErrors(newErrors);\r\n    } else {\r\n      axiosInstance\r\n        .put(\r\n          `projonline/updatehandoverchanges/${item._id}`,\r\n          {\r\n            approveComment: comment,\r\n            status: \"Deny\",\r\n          },\r\n          {\r\n            headers: {\r\n              token:\r\n                \"Bearer \" +\r\n                JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n            },\r\n          }\r\n        )\r\n        .then((res) => {\r\n          axiosInstance\r\n            .put(\r\n              `projonline/update/${item.taskRefID}`,\r\n              {\r\n                taskObject: {},\r\n                taskHistory: {\r\n                  taskStatus: \"Handover change denied\",\r\n                  comment: comment,\r\n                },\r\n              },\r\n              {\r\n                headers: {\r\n                  token:\r\n                    \"Bearer \" +\r\n                    JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n                },\r\n              }\r\n            )\r\n            .then((res) => {\r\n              setOpen(true);\r\n              setSeverity(\"success\");\r\n              setAlart(\"Handover Denied\");\r\n              setShow(false);\r\n              getData();\r\n              return;\r\n            })\r\n            .catch((err) => {\r\n              console.log(err);\r\n              setOpen(true);\r\n              setSeverity(\"error\");\r\n              setAlart(\"Error occured\");\r\n            });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n        });\r\n    }\r\n  };\r\n\r\n  const smsFetch = async (mobileNo, taskRef) => {\r\n    //console.log(users.filter((obj) => (obj._id === form.assignedMobitelOfficer))[0].mobileNo)\r\n    const url =\r\n      \"https://msmsenterpriseapi.mobitel.lk/EnterpriseSMSV3/esmsproxyURL.php\";\r\n    const Body = {\r\n      username: \"smsdigisvc_sci\",\r\n      password: \"Sci@#25\",\r\n      from: \"Mobitel-PMS\",\r\n      to: \"0\" + mobileNo,\r\n      text:\r\n        \"Task ID:\" + taskRef + \" task is commenced now and assigned to you.\",\r\n      mesageType: 0,\r\n    };\r\n    //console.log(JSON.parse(localStorage.getItem(\"user\")))\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      body: JSON.stringify(Body),\r\n      mode: \"no-cors\",\r\n    };\r\n    try {\r\n      const response = await fetch(url, requestOptions);\r\n      // console.log(response)\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    { field: \"taskRef\", headerName: \"TaskID\", width: 250 },\r\n    { field: \"siteID\", headerName: \"SiteID\", width: 150 },\r\n    { field: \"siteName\", headerName: \"Site Name\", width: 175 },\r\n    { field: \"project\", headerName: \"Project\", width: 250 },\r\n    { field: \"subProject\", headerName: \"Sub Project\", width: 250 },\r\n    {\r\n      field: \"Approve handover changes\",\r\n      width: 250,\r\n      align: \"center\",\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <Button\r\n            variant=\"primary\"\r\n            style={{ width: 100 }}\r\n            onClick={() => handleShow(cellValues.row)}\r\n          >\r\n            To Approve\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div>\r\n      {/* Content Wrapper. Contains page content */}\r\n      <div className=\"content-wrapper\">\r\n        <div className=\"content-header\">\r\n          <section className=\"content-header\">\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row mb-2\">\r\n                <div className=\"col-sm-6\">\r\n                  <h1>Approve Handover Changes</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /.container-fluid */}\r\n          </section>\r\n        </div>\r\n\r\n        <div style={{ height: 610, width: \"100%\" }}>\r\n          <DataGrid\r\n            getRowId={(item) => item._id}\r\n            rows={items}\r\n            columns={columns}\r\n            pageSize={15}\r\n            rowsPerPageOptions={[15]}\r\n            rowHeight={30}\r\n            headerHeight={40}\r\n            components={{ Toolbar: GridToolbar }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <Modal show={show} onHide={handleClose} size=\"lg\" animation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit Handover</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form onSubmit={handleClose}>\r\n            {headerProperties?.map((headerProperty, index) => {\r\n              if (index < 3) {\r\n                return (\r\n                  <Row>\r\n                    <Form.Group className=\"m-2\" controlId=\"refid\" as={Col}>\r\n                      <Form.Label>{headerProperty}</Form.Label>\r\n                      <Form.Control\r\n                        className=\"mr-1 ml-1\"\r\n                        value={properties[index]}\r\n                        onChange={(e) => handleChange(e, index)}\r\n                        type=\"text\"\r\n                        readOnly\r\n                      />\r\n                    </Form.Group>\r\n                  </Row>\r\n                );\r\n              } else {\r\n                return (\r\n                  <Row>\r\n                    <Form.Group className=\"m-2\" controlId=\"refid\" as={Col}>\r\n                      <Form.Label>{headerProperty}</Form.Label>\r\n                      <div className=\"d-flex flex-row\">\r\n                        <Form.Control\r\n                          className=\"mr-1 ml-1\"\r\n                          value={item.existingProperties[index]}\r\n                          type=\"text\"\r\n                          readOnly\r\n                        />\r\n                        <Form.Control\r\n                          className={`mr-1 ml-1 ${\r\n                            item.existingProperties[index] != properties[index]\r\n                              ? \"text-danger\"\r\n                              : \"\"\r\n                          }`}\r\n                          value={properties[index]}\r\n                          onChange={(e) => handleChange(e, index)}\r\n                          type=\"text\"\r\n                          readOnly\r\n                        />\r\n                      </div>\r\n                    </Form.Group>\r\n                  </Row>\r\n                );\r\n              }\r\n            })}\r\n            {item.taskStatus && (\r\n              <Row>\r\n                <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\r\n                  <Form.Label>Requested Status</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    rows={3}\r\n                    required\r\n                    value={item.taskStatus}\r\n                    readonly\r\n                  />\r\n                </Form.Group>\r\n              </Row>\r\n            )}\r\n            <Row>\r\n              <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\r\n                <Form.Label>Reason for the change request</Form.Label>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  rows={3}\r\n                  required\r\n                  value={item.comment}\r\n                  readonly\r\n                />\r\n              </Form.Group>\r\n            </Row>\r\n            <Row>\r\n              <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\r\n                <Form.Label>Approval Comment</Form.Label>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  value={comment}\r\n                  rows={3}\r\n                  required\r\n                  onChange={(e) => setComment(e.target.value)}\r\n                  isInvalid={!!errors.comment}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                  Please provide comment\r\n                </Form.Control.Feedback>\r\n              </Form.Group>\r\n            </Row>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={handleDeny}>\r\n            Deny\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleSubmit}>\r\n            Approve\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={6000}\r\n        onClose={alertClose}\r\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n      >\r\n        <Alert onClose={alertClose} severity={severity} sx={{ width: \"100%\" }}>\r\n          {alart}\r\n        </Alert>\r\n      </Snackbar>\r\n\r\n      <Dialog\r\n        open={openDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogContent>\r\n          <Box sx={{ display: \"flex\" }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(ApproveHandoverChangesBody);\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["Alert","React","props","ref","elevation","variant","withRouter","items","setItems","useState","item","setItem","properties","setProperties","headerProperties","setHeaderProperties","open","setOpen","severity","setSeverity","alart","setAlart","comment","setComment","errors","setErrors","openDialog","setOpenDialog","handleChange","e","index","target","value","show","setShow","handleClose","axiosInstance","axios","baseURL","process","useEffect","getData","findFormErrors","newErrors","console","log","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","catch","err","alertClose","event","reason","columns","field","headerName","width","align","renderCell","cellValues","style","onClick","handleShow","row","newProperties","className","height","getRowId","_id","rows","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","onHide","size","animation","closeButton","onSubmit","map","headerProperty","controlId","as","Col","onChange","type","readOnly","existingProperties","taskStatus","required","readonly","isInvalid","Object","keys","length","put","approveComment","status","taskRefID","taskObject","taskHistory","changedProperties","values","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","display"],"sourceRoot":""}