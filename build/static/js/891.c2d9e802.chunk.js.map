{"version":3,"file":"static/js/891.c2d9e802.chunk.js","mappings":"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","sources":["components/HandoverNewTasks.jsx","../node_modules/form-data/lib/browser.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport XLSX from 'xlsx'\nimport Dialog from '@mui/material/Dialog';\nimport Box from '@mui/material/Box';\nimport DialogContent from '@mui/material/DialogContent';\nimport FormData from 'form-data'\nimport CircularProgress from '@mui/material/CircularProgress';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { Next } from 'react-bootstrap/esm/PageItem';\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst EXTENSIONS = ['csv', 'xls', 'xlsx']\n\nfunction HandoverNewTasks(props) {\n\n    let [rates, setRates] = useState([])\n    let [headersConfig, setHeadersConfig] = useState([])\n    let [alart, setAlart] = useState(\"\")\n    let [projects, setProjects] = useState([])\n    let [projectsData, setProjectsData] = useState([])\n    let [subProjects, setSubProjects] = useState([])\n    let [projectID, setProjectID] = useState(0)\n    let [assignedProjectManager, setAssignedProjectManager] = useState('')\n    let [severity, setSeverity] = useState(\"\")\n    let [properties, setProperties] = useState(\"\")\n    let [tasks, setTasks] = useState([])\n    let [filterTasks, setFilterTasks] = useState([])\n    let [selectedFile, setSelectedFile] = useState([])\n\n    const axiosInstance = axios.create({\n        baseURL: process.env.REACT_APP_BACKEND_URL,\n    })\n\n\n    let [form, setForm] = useState({})\n    let [errors, setErrors] = useState({})\n    let [open, setOpen] = useState(false);\n    let [openDialog, setOpenDialog] = useState(false);\n    let ref = useRef();\n\n    let setField = (field, value) => {\n        setForm({\n            ...form,\n            [field]: value\n        })\n        if (!!errors[field]) setErrors({\n            ...errors,\n            [field]: null\n        })\n    }\n\n\n    const findFormErrors = () => {\n        const { project, subProject, taskAssignedFromDiV, taskAssignedDiv } = form\n        const newErrors = {}\n        // name errors\n        if (!project || project === '' || taskAssignedFromDiV === 'Choose...') newErrors.project = 'cannot be blank!'\n        if (!subProject || subProject === '' || taskAssignedFromDiV === 'Choose...') newErrors.subProject = 'cannot be blank!'\n        if (!taskAssignedFromDiV || taskAssignedFromDiV === '' || taskAssignedFromDiV === 'Choose...') newErrors.taskAssignedFromDiV = 'Choose a division!'\n        if (!taskAssignedDiv || taskAssignedDiv === '' || taskAssignedDiv === 'Choose...') newErrors.taskAssignedDiv = 'Choose a division!'\n        if (!headersConfig || headersConfig.length === 0) newErrors.file = 'Attachment missing!'\n        return newErrors\n    }\n    const findDownloadErrors = () => {\n        const { project, subProject, taskAssignedFromDiV, taskAssignedDiv } = form\n        const newErrors = {}\n        // name errors\n        if (!project || project === '' || taskAssignedFromDiV === 'Choose...') newErrors.project = 'cannot be blank!'\n        if (!subProject || subProject === '' || taskAssignedFromDiV === 'Choose...') newErrors.subProject = 'cannot be blank!'\n        return newErrors\n    }\n\n    useEffect(() => {\n        axiosInstance.get('projonline/project', { headers: { token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken } }).then(res => {\n\n            setForm({})\n\n            setProjects([...new Set(res.data.projTemplates.map(ele => ele.project))])\n            setSubProjects([...new Set(res.data.projTemplates.map(ele => ele.subProject))])\n            setProjectsData(res.data.projTemplates)\n            const data = res.data.tasks.filter((task) => { if (task.taskStatus != 'Withdraw') { return task } })\n            setTasks(data)\n            setFilterTasks(data)\n\n\n        }).catch(err => {\n            console.log(err)\n        })\n\n\n    }, [])\n\n\n    const convertToJson = (headers, fileData) => {\n        const rows = []\n        fileData.forEach((row, i) => {\n\n            let rowData = {}\n            rowData['id'] = i\n            row.forEach((element, index) => {\n                rowData[headers[index]] = element\n            })\n            rows.push(rowData)\n        })\n        return rows\n    }\n\n    const changeProject = (e) => {\n\n        setField('project', e.target.value)\n        // console.log(e.target.value)\n        // console.log(projectsData)\n        // console.log(projectsData)\n        let t = projectsData.filter((task) => task.project == e.target.value)\n        setSubProjects([...new Set(t.map(ele => ele.subProject))])\n        // console.log(t)\n        for (var i = 0; i < projectsData.length; i++) {\n            if ((e.target.value == projectsData[i].project) && (form.subProject == projectsData[i].subProject)) {\n                // console.log(projectsData[i])\n                setProjectID(projectsData[i].projectID)\n                // console.log(projectsData[i].projectID)\n               \n                i = projectsData.length\n            } else if (i == projectsData.length - 1) {\n                setProjectID(\"\")\n            }\n        }\n    }\n\n    const changeSubProject = (e) => {\n        // console.log(filterTasks)\n        setField('subProject', e.target.value)\n        // console.log(e.target.value)\n       \n        for (var i = 0; i < projectsData.length; i++) {\n            if ((form.project == projectsData[i].project) && (e.target.value == projectsData[i].subProject)) {\n                setAssignedProjectManager(projectsData[i].assignedProjectManager)\n                setProjectID(projectsData[i].projectID)\n                // console.log(projectsData[i])    \n\n                i = projectsData.length\n            } else if (i == projectsData.length - 1) {\n                setProjectID(\"\")\n                setAssignedProjectManager(\"\")\n            }\n        }\n\n\n    }\n\n    // useEffect(()=>{\n    //     if(form['project'] && form['subProject']){\n    //         setFilterTasks(tasks.filter((task)=>(task.project==form['project'] && task.subProject == form['subProject'])) )\n    //     } \n    // },[form['project'],form['subProject']])\n\n    const getExtention = (file) => {\n        const parts = file.name.split('.')\n        const extension = parts[parts.length - 1]\n        return EXTENSIONS.includes(extension)\n    }\n\n    const importExcel = (e) => {\n\n        const file = e.target.files[0]\n\n        setErrors({\n            ...errors,\n            file: null\n        })\n\n        setSelectedFile(e.target.files)\n\n        const reader = new FileReader()\n        reader.onload = (e) => {\n\n            //parse data\n            const bstr = e.target.result\n            const workBook = XLSX.read(bstr, { type: 'binary' })\n\n            //get First Sheet\n            const workSheetName = workBook.SheetNames[0]\n            const workSheet = workBook.Sheets[workSheetName]\n            //convert to array\n            const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\n            const header = fileData[0]\n            const headers = []\n            for (let j = 0; j < projectsData.length; j++) {\n\n                // console.log(projectsData[j].projectID, \"_\", projectID)\n\n\n                if (projectsData[j].projectID === projectID) {\n\n\n                    if (arrayEquals(projectsData[j].properties, header)) {\n                        // console.log(projectsData[j])\n                        for (var i = 0; i < fileData[0].length; i++) {\n                            // console.log(\"rates\")\n                            let element = { field: fileData[0][i], headerName: fileData[0][i], minWidth: 150, flex: 1 };\n                            headers.push(element);\n                        }\n\n                        setHeadersConfig(headers)\n\n                        fileData.splice(0, 1)\n                        setProperties(fileData)\n                        setRates(convertToJson(header, fileData))\n                        // console.log(fileData)\n                        //totalInputHeader = projects[j].properties.splice(0, 3)\n                        j = projectsData.length\n                    } else {\n                        setOpen(true)\n                        setSeverity(\"error\")\n                        setAlart(\"Project Template is different\")\n                        setRates([])\n                        setHeadersConfig([])\n                        j = projectsData.length\n                        //totalInputHeader = projects[j].properties.splice(0, 3)\n                    }\n\n                } else if (j == projectsData.length - 1) {\n                    setOpen(true)\n                    setSeverity(\"error\")\n                    setAlart(\"Project Supproject combination is not available\")\n                    setRates([])\n                    setHeadersConfig([])\n                }\n            }\n        }\n        if (file) {\n            if (getExtention(file)) {\n                reader.readAsBinaryString(file)\n            } else {\n                alert(\"Invalid file\")\n            }\n        } else {\n            setRates([])\n        }\n\n    }\n\n\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        const newErrors = findFormErrors()\n        // Conditional logic:\n        if (Object.keys(newErrors).length > 0) {\n            // We got errors!\n            setErrors(newErrors)\n            console.log(newErrors)\n        } else {\n            \n            var uploadfiles = new FormData()\n\n            uploadfiles.append('files', selectedFile[0])\n            console.log(selectedFile[0])\n            console.log(uploadfiles)\n\n            const taskObject = {\n                taskAssignedFromDiV: form.taskAssignedFromDiV,\n                taskAssignedDiv: form.taskAssignedDiv,\n                assignedProjectManager: assignedProjectManager._id,\n                project: form.project,\n                subProject: form.subProject,\n                projectID: projectID,\n                taskStatus: \"Task handed over\",\n                properties: properties,\n                priority: form.priority,\n                headerProperties: headersConfig.map(item => item.field)\n            };\n\n            // console.log(taskObject)\n            setOpenDialog(true)\n\n            axiosInstance.post('projonline/upload',uploadfiles,{headers: {token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken,\"Content-type\": \"multipart/form-data\" } }).then((res1) => {\n                    taskObject.handoverFiles=res1.data\n                    console.log(taskObject)\n                    axiosInstance.post('projonline/addTask', taskObject, { headers: { token: \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken } })\n                                .then((res) => {\n                                    console.log(\"Test\")\n                                    // console.log(res.data.msg)\n\n\n                                    setTimeout(() => {\n                                        setAlart(res.data.msg)\n                                        setSeverity(res.data.variant)\n                                        setForm({\n                                            'taskAssignedFromDiV': '',\n                                            'taskAssignedDiv': '',\n                                            'project': '',\n                                            'subProject': '',\n                                            'priority':\"None\"\n                                        })\n                                        setProjectID(\"\")\n                                        setAssignedProjectManager(\"\")\n                                        setOpen(true)\n                                    }, 2000)\n                                    setTimeout(() => {\n                                        setOpenDialog(false)\n                                        setOpen(false)\n                                        setRates([])\n                                        setHeadersConfig([])\n                                        ref.current.value = \"\"\n                                    }, 5000)\n\n\n\n                                }).catch((error) => {\n                                    console.log(error)\n                            });\n                        }).catch((error) => {\n                            console.log(error)\n            })\n\n            \n        }\n\n\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const downloadHandover = (e) => {\n        const newErrors = findDownloadErrors()\n        if (Object.keys(newErrors).length > 0) {\n            // We got errors!\n            setErrors(newErrors)\n        } else if (filterTasks.length > 0) {\n\n            // if (!projectID == '' ){\n            //Create Downloadable excel file\n            var workbook = XLSX.utils.book_new();\n\n            //get selected projects\n            // var selectedProjects = [...new Set(props.location.data.map(ele=>ele.projectID))]\n            var worksheetData = []\n            var filteredTasks = tasks.filter((task) => (task.project == form['project'] && task.subProject == form['subProject']))\n            var data = []\n            // console.log(filteredTasks)\n            for (var i = 0; i < filteredTasks.length; i++) {\n                let prop = filteredTasks[i].properties;\n                // console.log(prop)\n                // console.log(filteredTasks[i].taskRef)\n                prop.unshift(filteredTasks[i].taskRef)\n                worksheetData.unshift(prop)\n                //console.log(worksheetData) \n            }\n            let headerProp = filteredTasks[0].headerProperties;\n            headerProp.unshift(\"Task ID\")\n            worksheetData.unshift(headerProp)\n            var ws = XLSX.utils.aoa_to_sheet(worksheetData);\n            XLSX.utils.book_append_sheet(workbook, ws, 'sheet1');\n            //console.log(worksheetData)\n            XLSX.writeFile(workbook, \"Already handedover tasks.xlsx\")\n            // console.log(filteredTasks)\n            worksheetData = []\n            filteredTasks = []\n            headerProp = []\n            setTasks(filterTasks)\n        }\n        else {\n            setOpen(true)\n            setSeverity(\"error\")\n            setAlart(\"Project Supproject combination is not available\")\n        }\n    }\n\n\n\n    return (\n        <div>\n\n            {/* Content Wrapper. Contains page content */}\n            <div className=\"content-wrapper\">\n                {/* Content Header (Page header) */}\n                <div className=\"content-header\">\n                    <section className=\"content-header\">\n                        <div className=\"container-fluid\">\n                            <div className=\"row mb-2\">\n                                <div className=\"col-sm-6\">\n                                    <h1>Handover New Tasks</h1>\n                                </div>\n                            </div>\n                        </div>{/* /.container-fluid */}\n                    </section>\n                </div>\n                {/* /.content-header */}\n                {/* Main content */}\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <Form onSubmit={onSubmit}>\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>From: Division</Form.Label>\n                                    <Form.Control onChange={e => setField('taskAssignedFromDiV', e.target.value)} value={form.taskAssignedFromDiV} as=\"select\" defaultValue=\"Choose...\" isInvalid={!!errors.taskAssignedFromDiV}>\n                                        <option>Choose...</option>\n                                        <option>Planning_Radio</option>\n                                        <option>Planning_Core</option>\n                                        <option>Planning_TX</option>\n                                        <option>Planning_IBS</option>\n                                        <option>Planning_WiFi</option>\n                                    </Form.Control>\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.taskAssignedFromDiV}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <Form.Group as={Col} >\n                                    <Form.Label>Assign to: Division</Form.Label>\n                                    <Form.Control onChange={e => setField('taskAssignedDiv', e.target.value)} value={form.taskAssignedDiv} as=\"select\" defaultValue=\"Choose...\" isInvalid={!!errors.taskAssignedDiv}>\n                                        <option>Choose...</option>\n                                        <option>Project_Radio</option>\n                                        <option>Project_Core</option>\n                                        <option>Project_TX</option>\n                                        <option>Project_IBS</option>\n                                        <option>Project_WiFi</option>\n                                    </Form.Control>\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.taskAssignedDiv}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <Form.Group as={Col} >\n                                    <Form.Label>Project Manager</Form.Label>\n                                    <Form.Control disabled value={assignedProjectManager.name} className=\"\" type=\"text\" placeholder=\"Project Manager\" isInvalid={!!errors.assignedProjectManager}>\n                                    </Form.Control>\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.taskAssignedDiv}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n\n\n                            </Row>\n\n                            <Row className=\"mb-3\">\n                                <Col sm={4}>\n                                    <Form.Group >\n                                        <Form.Label>Project</Form.Label>\n                                        <Form.Control onChange={changeProject} value={form.project} as=\"select\" defaultValue=\"Choose...\" isInvalid={!!errors.project}>\n                                            <option value=\"\">Choose...</option>\n                                            {projects.map(opt => (\n                                                <option value={opt}>{opt}</option>\n                                            ))}\n                                        </Form.Control>\n                                        <Form.Control.Feedback type='invalid'>\n                                            {errors.project}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                </Col>\n                                <Col sm={4}>\n                                    <Form.Group >\n                                        <Form.Label>Sub Project</Form.Label>\n                                        <Form.Control onChange={changeSubProject} disabled={form.project ? false : true} value={form.subProject} as=\"select\" defaultValue=\"Choose...\" isInvalid={!!errors.subProject}>\n                                            <option>Choose...</option>\n                                            {subProjects.map(opt => (\n                                                <option value={opt}>{opt}</option>\n                                            ))}\n                                        </Form.Control>\n                                        <Form.Control.Feedback type='invalid'>\n                                            {errors.subProject}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                \n                                </Col>\n                                <Col sm={2}>\n                                \n                                    <Form.Group >\n\n                                    <Form.Label>Project ID</Form.Label>\n                                    <Form.Control disabled value={projectID} className=\"\" type=\"text\" placeholder=\"Project ID\" isInvalid={!!errors.projectID} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.projectID}\n                                    </Form.Control.Feedback>\n\n                                    </Form.Group>\n                                </Col>\n                                <Col sm={2}>\n                                    <Form.Group >\n                                        <Form.Label>Priority</Form.Label>\n                                        <Form.Control onChange={e => setField('priority', e.target.value)} disabled={form.project ? false : true} value={form.priority} as=\"select\" defaultValue=\"None\" isInvalid={!!errors.priority}>\n                                            <option>None</option>\n                                            <option>High Priority</option>\n                                            <option>VIP</option>\n                                            \n                                        </Form.Control>\n                                        <Form.Control.Feedback type='invalid'>\n                                            {errors.priority}\n                                        </Form.Control.Feedback>\n                                    </Form.Group>\n                                </Col> \n                            </Row>\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>Upload new task handover</Form.Label>\n                                    <Form.Control onChange={importExcel} ref={ref} type=\"file\" isInvalid={!!errors.file} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.file}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Row>\n\n                            <Row className=\"mb-3\">\n                                <Button variant=\"primary\" type=\"submit\">Handover new tasks</Button>\n                                <Col> <Button variant=\"outline-success\" onClick={downloadHandover}>Dowanload already handed over tasks</Button></Col>\n                            </Row>\n\n                        </Form>\n\n                        <div style={{ height: 610, width: '100%' }}>\n                            <DataGrid\n                                getRowId={(item) => item.id}\n                                rows={rates}\n                                columns={headersConfig}\n                                pageSize={15}\n                                rowsPerPageOptions={[15]}\n                                rowHeight={30}\n                                headerHeight={40}\n                                components={{ Toolbar: GridToolbar }}\n                            />\n\n                        </div>\n                    </div>{/* /.container-fluid */}\n                </section>\n                {/* /.content */}\n\n\n            </div>\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }} >\n                    {alart}\n                </Alert>\n            </Snackbar>\n\n            <Dialog\n                open={openDialog}\n                onClose={handleClose}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogContent>\n                    <Box sx={{ display: 'flex' }}>\n                        <CircularProgress />\n                    </Box>\n\n\n                </DialogContent>\n            </Dialog>\n\n        </div >\n    )\n}\n\nfunction arrayEquals(a, b) {\n    return Array.isArray(a) &&\n        Array.isArray(b) &&\n        a.length === b.length &&\n        a.every((val, index) => val === b[index]);\n}\n\nexport default withRouter(HandoverNewTasks)","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n"],"names":["Alert","React","props","ref","elevation","variant","EXTENSIONS","arrayEquals","a","b","Array","isArray","length","every","val","index","withRouter","useState","rates","setRates","headersConfig","setHeadersConfig","alart","setAlart","projects","setProjects","projectsData","setProjectsData","subProjects","setSubProjects","projectID","setProjectID","assignedProjectManager","setAssignedProjectManager","severity","setSeverity","properties","setProperties","tasks","setTasks","filterTasks","setFilterTasks","selectedFile","setSelectedFile","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","openDialog","setOpenDialog","useRef","setField","field","value","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","Set","data","projTemplates","map","ele","project","subProject","filter","task","taskStatus","catch","err","console","log","convertToJson","fileData","rows","forEach","row","i","rowData","element","push","handleClose","event","reason","className","onSubmit","e","preventDefault","newErrors","taskAssignedFromDiV","taskAssignedDiv","file","findFormErrors","Object","keys","uploadfiles","FormData","append","taskObject","_id","priority","headerProperties","item","post","res1","handoverFiles","setTimeout","msg","current","error","as","Col","onChange","target","defaultValue","isInvalid","type","disabled","name","placeholder","sm","t","opt","files","reader","FileReader","onload","bstr","result","workBook","XLSX","workSheetName","SheetNames","workSheet","Sheets","header","j","headerName","minWidth","flex","splice","parts","split","extension","includes","getExtention","alert","readAsBinaryString","onClick","findDownloadErrors","workbook","worksheetData","filteredTasks","prop","unshift","taskRef","headerProp","ws","style","height","width","getRowId","id","columns","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","display","module","exports","self","window"],"sourceRoot":""}