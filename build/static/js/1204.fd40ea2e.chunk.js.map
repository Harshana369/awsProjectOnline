{"version":3,"file":"static/js/1204.fd40ea2e.chunk.js","mappings":"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","sources":["components/CreateProjectTemplate.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport XLSX from 'xlsx'\nimport Box from '@mui/material/Box';\nimport DialogContent from '@mui/material/DialogContent';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Dialog from '@mui/material/Dialog'\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst EXTENSIONS = ['csv', 'xls', 'xlsx']\n\nfunction CreateProjectTemplate(props) {\n\n    let [companies, setCompanies] = useState([]);\n    let [rates, setRates] = useState([]);\n    let [file, setFile] = useState();\n    let [headersConfig, setHeadersConfig] = useState([]);\n    let [alart, setAlart] = useState(\"\");\n    let [severity, setSeverity] = useState(\"\");\n    let [projects, setProjects] = useState([])\n    let [users, setUsers] = useState([]);\n    let [openDialog, setOpenDialog] = useState(false);\n    const axiosInstance = axios.create({\n        baseURL: process.env.REACT_APP_BACKEND_URL,\n    })\n\n    const handleCloseLoading = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    }\n\n\n    let [form, setForm] = useState({})\n    let [errors, setErrors] = useState({})\n    let [open, setOpen] = useState(false);\n\n    let setField = (field, value) => {\n        setForm({\n            ...form,\n            [field]: value\n        })\n        if (!!errors[field]) setErrors({\n            ...errors,\n            [field]: null\n        })\n    }\n\n    const findFormErrors = () => {\n        const { subProject, project } = form\n        const newErrors = {}\n        // name errors\n        if (!subProject || subProject === '') newErrors.subProject = 'cannot be blank!'\n        if (!project || project === '') newErrors.project = 'cannot be blank!'\n        if (!headersConfig || headersConfig.length === 0) newErrors.file = 'Attachment missing!'\n        // console.log(headersConfig);\n        // console.log(newErrors)\n        return newErrors\n    }\n\n    useEffect(() => {\n        axiosInstance.get('projonline/users',{headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res=>{\n            \n            setCompanies(res.data.companys.filter((obj) => (obj.companyName !== 'Mobitel')))\n            setProjects(res.data.projects)\n\n            setField('projectID', res.data.projects.length + 1)\n\n            return\n        }).catch(err => {\n            console.log(err)\n        })\n\n        axiosInstance.get('projonline/mobitelusers', {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n            // const result = \n            // console.log(res.data)\n            setUsers(res.data)\n\n            return\n        }).catch(err => {\n            console.log(err)\n        })\n\n    }, [])\n\n\n\n\n    const convertToJson = (headers, fileData) => {\n        const rows = []\n        fileData.forEach((row, i) => {\n\n            let rowData = {}\n            rowData['id'] = i\n            row.forEach((element, index) => {\n                rowData[headers[index]] = element\n            })\n            rows.push(rowData)\n        })\n        return rows\n    }\n\n    const getExtention = (file) => {\n        const parts = file.name.split('.')\n        const extension = parts[parts.length - 1]\n        return EXTENSIONS.includes(extension)\n    }\n\n    const importExcel = (e) => {\n        const file = e.target.files[0]\n\n        setErrors({\n            ...errors,\n            file: null\n        })\n\n        const reader = new FileReader()\n        reader.onload = (e) => {\n\n            //parse data\n            const bstr = e.target.result\n            const workBook = XLSX.read(bstr, { type: 'binary' })\n\n            //get First Sheet\n            const workSheetName = workBook.SheetNames[0]\n            const workSheet = workBook.Sheets[workSheetName]\n            //convert to array\n            const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\n            const header = fileData[0]\n            const headers = []\n\n            if (fileData[0][1] === \"Site ID\" && fileData[0][2] === \"Site Name\") {\n                for (var i = 0; i < fileData[0].length; i++) {\n                    let element = { field: fileData[0][i], headerName: fileData[0][i], minWidth: 150, flex: 1 };\n                    headers.push(element);\n                }\n                setHeadersConfig(headers)\n\n                fileData.splice(0, 1)\n                setRates(convertToJson(header, fileData))\n                // console.log(rates)\n            } else {\n                setOpen(true)\n                setSeverity(\"error\")\n                setAlart(\"Site ID and Site Name should be in Column No 2 and 3\")\n                setRates([])\n                setHeadersConfig([])\n            }\n\n\n        }\n        if (file) {\n            if (getExtention(file)) {\n                reader.readAsBinaryString(file)\n\n            } else {\n                alert(\"Invalid file\")\n            }\n        } else {\n            setRates([])\n        }\n\n    }\n\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        setOpenDialog(true)\n        const newErrors = findFormErrors()\n        // Conditional logic:\n        if (Object.keys(newErrors).length > 0) {\n            // We got errors!\n            setErrors(newErrors)\n            setOpenDialog(false)\n        } else {\n            const taskObject = {\n                projectID: form.projectID,\n                subProject: form.subProject,\n                project: form.project,\n                properties: headersConfig.map(item => item.field),\n                assignedProjectManager:form.assignedProjectManager,\n                taskStatus: \"Project template created\"\n            };\n\n            // console.log(taskObject)\n\n            axiosInstance.post('projonline/addProjectTemplate', taskObject,{headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}})\n                .then((res) => {\n                    // console.log(res.data.msg)\n                    setAlart(res.data.msg)\n                    setSeverity(res.data.variant)\n                    setOpen(true)\n                    setForm({\n                        'project': '',\n                        'subProject': '',\n                        'projectID': '',\n                        'assignedProjectManager': '',\n                    })\n                    setRates([])\n                    setHeadersConfig([])\n                    setOpenDialog(false)\n                }).catch((error) => {\n                    console.log(error)\n                });\n        }\n\n\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n\n\n    return (\n        <div>\n\n            {/* Content Wrapper. Contains page content */}\n            <div className=\"content-wrapper\">\n                {/* Content Header (Page header) */}\n                <div className=\"content-header\">\n                    <section className=\"content-header\">\n                        <div className=\"container-fluid\">\n                            <div className=\"row mb-2\">\n                                <div className=\"col-sm-6\">\n                                    <h1>Upload New Project Temptate</h1>\n                                </div>\n                            </div>\n                        </div>{/* /.container-fluid */}\n                    </section>\n                </div>\n                {/* /.content-header */}\n                {/* Main content */}\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <Form onSubmit={onSubmit}>\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>Project ID</Form.Label>\n                                    <Form.Control disabled onChange={e => setField('projectID', e.target.value)} value={form.projectID} className=\"col-md-9\" type=\"text\" placeholder=\"Enter Project Name\" isInvalid={!!errors.projectID} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.projectID}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <Form.Group as={Col} >\n                                    <Form.Label>Project Manager</Form.Label>\n                                    <Form.Control onChange={e => setField('assignedProjectManager', e.target.value)} value={form.assignedProjectManager} className=\"col-md-9\" as=\"select\" defaultValue=\"Choose...\" isInvalid={!!errors.assignedProjectManager} >\n                                        <option>Choose...</option>\n                                        {users.map((user) => {\n                                            return (<option value={user._id}>{user.name}</option>)\n                                        })}\n                                    </Form.Control>\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.assignedMobitelOfficer}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                \n                            </Row>\n\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>Project Name</Form.Label>\n                                    <Form.Control onChange={e => setField('project', e.target.value)} value={form.project} className=\"col-md-9\" type=\"text\" placeholder=\"Enter Project Name\" isInvalid={!!errors.project} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.project}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <Form.Group as={Col} >\n                                    <Form.Label>Sub-Project Name</Form.Label>\n                                    <Form.Control onChange={e => setField('subProject', e.target.value)} value={form.subProject} className=\"col-md-9\" type=\"text\" placeholder=\"Enter Sub-Project Name\" isInvalid={!!errors.subProject} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.subProject}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                            </Row>\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>Upload the project HO template</Form.Label>\n                                    <Form.Control onChange={importExcel} type=\"file\" isInvalid={!!errors.file} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.file}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Row>\n                            <Row className=\"mb-3\">\n                                <Button variant=\"primary\" type=\"submit\">\n                                    Create the template\n                                </Button>\n                            </Row>\n\n                        </Form>\n\n                        <div style={{ height: 610, width: '100%' }}>\n                            <DataGrid\n                                getRowId={(item) => item.id}\n                                rows={rates}\n                                columns={headersConfig}\n                                pageSize={15}\n                                rowsPerPageOptions={[15]}\n                                rowHeight={30}\n                                headerHeight={40}\n                                components={{ Toolbar: GridToolbar }}\n                            />\n\n                        </div>\n                    </div>{/* /.container-fluid */}\n                </section>\n                {/* /.content */}\n\n\n            </div>\n\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }} >\n                    {alart}\n                </Alert>\n            </Snackbar>\n            <Dialog\n                open={openDialog}\n                onClose={handleCloseLoading}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogContent>\n                    <Box sx={{ display: 'flex' }}>\n                        <CircularProgress />\n                    </Box>\n\n\n                </DialogContent>\n            </Dialog>\n\n\n\n        </div>\n    )\n}\n\nexport default withRouter(CreateProjectTemplate)"],"names":["Alert","React","props","ref","elevation","variant","EXTENSIONS","withRouter","companies","setCompanies","useState","rates","setRates","file","setFile","headersConfig","setHeadersConfig","alart","setAlart","severity","setSeverity","projects","setProjects","users","setUsers","openDialog","setOpenDialog","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","setField","field","value","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","companys","filter","obj","companyName","length","catch","err","console","log","handleClose","event","reason","className","onSubmit","e","preventDefault","newErrors","subProject","project","findFormErrors","Object","keys","taskObject","projectID","properties","map","item","assignedProjectManager","taskStatus","post","msg","error","as","Col","disabled","onChange","target","type","placeholder","isInvalid","defaultValue","user","_id","name","assignedMobitelOfficer","files","reader","FileReader","onload","bstr","result","workBook","XLSX","workSheetName","SheetNames","workSheet","Sheets","fileData","header","i","element","headerName","minWidth","flex","push","splice","rows","forEach","row","rowData","index","convertToJson","parts","split","extension","includes","getExtention","readAsBinaryString","alert","style","height","width","getRowId","id","columns","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","display"],"sourceRoot":""}