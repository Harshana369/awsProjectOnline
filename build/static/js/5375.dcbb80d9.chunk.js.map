{"version":3,"file":"static/js/5375.dcbb80d9.chunk.js","mappings":"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","sources":["components/CompleteNewSpecificTaskBody.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport XLSX from \"xlsx\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Box from \"@mui/material/Box\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction CompleteNewSpecificTaskBody(props) {\n  let [users, setUsers] = useState([]);\n  let [companies, setCompanies] = useState([]);\n  let [severity, setSeverity] = useState(\"\");\n  let [alart, setAlart] = useState(\"\");\n  const axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL,\n  });\n\n  let [form, setForm] = useState({});\n  let [errors, setErrors] = useState({});\n  let [open, setOpen] = useState(false);\n  let [openDialog, setOpenDialog] = useState(false);\n\n  let setField = (field, value) => {\n    setForm({\n      ...form,\n      [field]: value,\n    });\n    if (!!errors[field])\n      setErrors({\n        ...errors,\n        [field]: null,\n      });\n  };\n\n  const findFormErrors = () => {\n    const { taskCommencedComment } = form;\n    const newErrors = {};\n    // name errors\n    if (!taskCommencedComment || taskCommencedComment === \"\")\n      newErrors.taskCommencedComment = \"cannot be blank!\";\n\n    return newErrors;\n  };\n\n  useEffect(() => {\n    // console.log(props.location.data.row)\n    setUsers([{ name: props.location.data.row.assignedMobitelOfficer.name }]);\n    setCompanies([\n      { companyName: props.location.data.row.assignedSubcon.companyName },\n    ]);\n    setForm({\n      taskRef: props.location.data.row.taskRef,\n      siteID: props.location.data.row.siteID,\n      siteName: props.location.data.row.siteName,\n      plannedTaskStartDate:\n        props.location.data.row.plannedTaskStartDate.split(\"T\")[0],\n      actualTaskStartDate: props.location.data.row.taskHistory\n        .find((x) => x.taskStatus === \"Task commenced\")\n        .performedDate.split(\"T\")[0],\n      targetTaskComDate:\n        props.location.data.row.targetTaskComDate.split(\"T\")[0],\n      taskAssignedDiv: props.location.data.row.taskAssignedDiv,\n      assignedMobitelOfficer:\n        props.location.data.row.assignedMobitelOfficer.name,\n      workScope: props.location.data.row.workScope,\n      assignedSubcon: props.location.data.row.assignedSubcon.companyName,\n      taskassignedSubconOfficer:\n        props.location.data.row.taskassignedSubconOfficer,\n      taskassignedMobileNo: props.location.data.row.taskassignedMobileNo,\n    });\n  }, []);\n\n  const downloadHandover = (e) => {\n    //Create Downloadable excel file\n    var workbook = XLSX.utils.book_new();\n    var aoa_projects = [];\n\n    //get selected projects\n    //console.log(props.location.data)\n\n    var worksheetData = [];\n\n    worksheetData.push(props.location.data.row.properties);\n    worksheetData.unshift(props.location.data.row.headerProperties);\n    //console.log(worksheetData)\n    var ws = XLSX.utils.aoa_to_sheet(worksheetData);\n    XLSX.utils.book_append_sheet(workbook, ws, \"HO Details\");\n\n    XLSX.writeFile(\n      workbook,\n      props.location.data.row.siteID + \"_Handover details.xlsx\"\n    );\n    // console.log(workbook)\n  };\n\n  const smsFetch = async (mobileNo) => {\n    //console.log(users.filter((obj) => (obj._id === form.assignedMobitelOfficer))[0].mobileNo)\n    const url =\n      \"https://msmsenterpriseapi.mobitel.lk/EnterpriseSMSV3/esmsproxyURL.php\";\n    const Body = {\n      username: \"smsdigisvc_sci\",\n      password: \"Sci@#25\",\n      from: \"Mobitel-PMS\",\n      to: \"0\" + mobileNo,\n      text: \"Task ID: \" + form.taskRef + \" task is completed now.\",\n      mesageType: 0,\n    };\n    //console.log(JSON.parse(localStorage.getItem(\"user\")))\n    const requestOptions = {\n      method: \"POST\",\n      body: JSON.stringify(Body),\n      mode: \"no-cors\",\n    };\n    const response = await fetch(url, requestOptions);\n    // console.log(response)\n  };\n\n  const onAccept = (e) => {\n    e.preventDefault();\n\n    const newErrors = findFormErrors();\n    // Conditional logic:\n    if (Object.keys(newErrors).length > 0) {\n      // We got errors!\n      setErrors(newErrors);\n    } else {\n      const taskObject = {\n        taskStatus: \"Task completed\",\n      };\n\n      // console.log(form.assignedMobitelOfficer)\n      // console.log(\"Jana\")\n      axiosInstance\n        .put(\n          \"projonline/update/\" + props.location.data.row._id,\n          {\n            taskObject,\n            taskHistory: {\n              taskStatus: \"Task completed\",\n              comment: form.taskCommencedComment,\n            },\n          },\n          {\n            headers: {\n              token:\n                \"Bearer \" +\n                JSON.parse(localStorage.getItem(\"user\")).accessToken,\n            },\n          }\n        )\n        .then((res) => {\n          // console.log(res.data)\n\n          setOpenDialog(true);\n          smsFetch(form.taskassignedMobileNo);\n          setTimeout(() => {\n            setAlart(res.data.alart);\n            setSeverity(res.data.severity);\n            setOpen(true);\n          }, 2000);\n\n          setTimeout(() => {\n            setOpenDialog(false);\n            setOpen(false);\n            props.history.push({ pathname: \"/completeNewTasks\" });\n          }, 5000);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {/* Content Wrapper. Contains page content */}\n      <div className=\"content-wrapper\">\n        {/* Content Header (Page header) */}\n        <div className=\"content-header\">\n          <section className=\"content-header\">\n            <div className=\"container-fluid\">\n              <div>\n                <h1>Complete Task ID: {form.taskRef} </h1>\n              </div>\n            </div>\n            {/* /.container-fluid */}\n          </section>\n        </div>\n        {/* /.content-header */}\n        {/* Main content */}\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <Form>\n              <Row>\n                <Form.Group as={Col}>\n                  <Form.Label>Site ID</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.siteID}\n                    className=\"col-md-9\"\n                    type=\"text\"\n                    placeholder=\"Enter site ID\"\n                    isInvalid={!!errors.siteID}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.siteID}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Site Name</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.siteName}\n                    type=\"text\"\n                    placeholder=\"Enter site Name\"\n                    isInvalid={!!errors.siteName}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.siteName}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"\"></Form.Group>\n              </Row>\n\n              <Row className=\"mb-3\">\n                <Form.Group as={Col}>\n                  <Form.Label>Planned Work Commencement Date</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.plannedTaskStartDate}\n                    className=\"col-md-9\"\n                    type=\"date\"\n                    isInvalid={!!errors.plannedTaskStartDate}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.plannedTaskStartDate}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Actual Work Commencement Date</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.actualTaskStartDate}\n                    className=\"col-md-9\"\n                    type=\"date\"\n                    isInvalid={!!errors.actualTaskStartDate}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.actualTaskStartDate}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Planned Work Completion Date</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.targetTaskComDate}\n                    className=\"col-md-9\"\n                    type=\"date\"\n                    isInvalid={!!errors.targetTaskComDate}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.targetTaskComDate}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n              <Row>\n                <Form.Group as={Col}>\n                  <Form.Label>Task Assigned Division</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.taskAssignedDiv}\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.taskAssignedDiv}\n                  >\n                    <option>Choose...</option>\n                    <option>Project_Radio</option>\n                    <option>Project_Core</option>\n                    <option>Project_TX</option>\n                    <option>Project_IBS</option>\n                    <option>Project_WiFi</option>\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskAssignedDiv}\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group as={Col}>\n                  <Form.Label>Assigned Mobitel Officer</Form.Label>\n                  <Form.Control\n                    disabled\n                    as=\"select\"\n                    value={form.assignedMobitelOfficer}\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.assignedMobitelOfficer}\n                  >\n                    <option>Choose...</option>\n                    {users.map((opt) => (\n                      <option value={opt._id}>{opt.name}</option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.assignedMobitelOfficer}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}></Form.Group>\n              </Row>\n\n              <Row>\n                <Form.Group as={Col}>\n                  <Form.Label>High level work scope</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.workScope}\n                    as=\"textarea\"\n                    rows={2}\n                    placeholder=\"\"\n                    isInvalid={!!errors.workScope}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.workScope}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n\n              <Row className=\"mb-3\">\n                <Form.Group as={Col}>\n                  <Form.Label>Assigned subcontractor</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.assignedSubcon}\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.assignedSubcon}\n                  >\n                    <option>Choose...</option>\n                    {companies.map((opt) => (\n                      <option value={opt._id}>{opt.companyName}</option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.assignedSubcon}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Handover Details</Form.Label>\n                  <br />\n                  <Button\n                    onClick={downloadHandover}\n                    variant=\"primary\"\n                    type=\"button\"\n                  >\n                    Click to Download\n                  </Button>\n                </Form.Group>\n\n                <Form.Group as={Col}></Form.Group>\n              </Row>\n\n              <Row>\n                <Form.Group as={Col}>\n                  <Form.Label>Task Assigned Subcon Officer</Form.Label>\n                  <Form.Control\n                    disabled\n                    onChange={(e) =>\n                      setField(\"taskassignedSubconOfficer\", e.target.value)\n                    }\n                    value={form.taskassignedSubconOfficer}\n                    className=\"col-md-9\"\n                    type=\"text\"\n                    placeholder=\"Enter name\"\n                    isInvalid={!!errors.taskassignedSubconOfficer}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskassignedSubconOfficer}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Mobile Number</Form.Label>\n                  <Form.Control\n                    disabled\n                    onChange={(e) =>\n                      setField(\"taskassignedMobileNo\", e.target.value)\n                    }\n                    className=\"col-md-9\"\n                    value={form.taskassignedMobileNo}\n                    type=\"number\"\n                    placeholder=\"Enter mobile number\"\n                    isInvalid={!!errors.taskassignedMobileNo}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskassignedMobileNo}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}></Form.Group>\n              </Row>\n              <Row>\n                <Form.Group as={Col}>\n                  <Form.Label>Comments</Form.Label>\n                  <Form.Control\n                    onChange={(e) =>\n                      setField(\"taskCommencedComment\", e.target.value)\n                    }\n                    as=\"textarea\"\n                    rows={2}\n                    value={form.taskCommencedComment}\n                    placeholder=\"Enter your comments\"\n                    isInvalid={!!errors.taskCommencedComment}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskCommencedComment}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n\n              <Button variant=\"primary\" onClick={onAccept}>\n                Task complete\n              </Button>\n            </Form>\n          </div>\n          {/* /.container-fluid */}\n        </section>\n        {/* /.content */}\n      </div>\n\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n      >\n        <Alert onClose={handleClose} severity={severity} sx={{ width: \"100%\" }}>\n          {alart}\n        </Alert>\n      </Snackbar>\n      <Dialog\n        open={openDialog}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogContent>\n          <Box sx={{ display: \"flex\" }}>\n            <CircularProgress />\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default withRouter(CompleteNewSpecificTaskBody);\n"],"names":["Alert","React","props","ref","elevation","variant","withRouter","users","setUsers","useState","companies","setCompanies","severity","setSeverity","alart","setAlart","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","openDialog","setOpenDialog","setField","field","value","useEffect","name","location","data","row","assignedMobitelOfficer","companyName","assignedSubcon","taskRef","siteID","siteName","plannedTaskStartDate","split","actualTaskStartDate","taskHistory","find","x","taskStatus","performedDate","targetTaskComDate","taskAssignedDiv","workScope","taskassignedSubconOfficer","taskassignedMobileNo","handleClose","event","reason","className","as","Col","disabled","type","placeholder","isInvalid","controlId","defaultValue","map","opt","_id","rows","onClick","e","workbook","XLSX","worksheetData","push","properties","unshift","headerProperties","ws","onChange","target","taskCommencedComment","preventDefault","newErrors","findFormErrors","Object","keys","length","taskObject","put","comment","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","async","Body","username","password","from","to","mobileNo","text","mesageType","requestOptions","method","body","stringify","mode","fetch","smsFetch","setTimeout","history","pathname","catch","error","console","log","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","width","display"],"sourceRoot":""}