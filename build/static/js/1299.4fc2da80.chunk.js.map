{"version":3,"file":"static/js/1299.4fc2da80.chunk.js","mappings":"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","sources":["components/AllTasksBody.jsx","webpack://frontend/./src/components/style.css?15d9"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport style from \"./style.css\";\r\nimport Table from \"@mui/material/Table\";\r\nimport TableBody from \"@mui/material/TableBody\";\r\nimport TableCell from \"@mui/material/TableCell\";\r\nimport TableContainer from \"@mui/material/TableContainer\";\r\nimport TableHead from \"@mui/material/TableHead\";\r\nimport TableRow from \"@mui/material/TableRow\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Collapse from \"@mui/material/Collapse\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport KeyboardArrowUpIcon from \"@mui/icons-material/KeyboardArrowUp\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport TablePagination from \"@mui/material/TablePagination\";\r\nimport XLSX from \"xlsx\";\r\nimport { Form, Container, Button, Row, Col, Modal } from \"react-bootstrap\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport Box from \"@mui/material/Box\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport InputIcon from \"@mui/icons-material/Input\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\n//import Stack from 'react-bootstrap/Stack'\r\n\r\nfunction Rows(props) {\r\n  const { row } = props;\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  let [show, setShow] = useState(false); // For HO PopUp window\r\n  let [selectedTaskData, setSelectedTaskData] = useState([]);\r\n\r\n  function modalClose() {\r\n    // For HO PopUp window\r\n    setShow(false);\r\n  }\r\n\r\n  function handleHOButtonClick() {\r\n    // For HO PopUp window\r\n    setShow(true);\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow\r\n        sx={{ \"& > *\": { borderBottom: \"unset\" } }}\r\n        style={{ height: 10 }}\r\n        padding=\"none\"\r\n      >\r\n        <TableCell>\r\n          <IconButton\r\n            aria-label=\"expand row\"\r\n            size=\"small\"\r\n            onClick={() => setOpen(!open)}\r\n          >\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          {row.taskRef}\r\n        </TableCell>\r\n        <TableCell>\r\n          {typeof row.siteID === \"undefined\" ? \"NA\" : row.siteID}\r\n        </TableCell>\r\n        <TableCell>\r\n          {typeof row.assignedSubcon === \"undefined\"\r\n            ? \"NA\"\r\n            : row.assignedSubcon.companyName}\r\n        </TableCell>\r\n        <TableCell>\r\n          {typeof row.assignedMobitelOfficer === \"undefined\"\r\n            ? \"NA\"\r\n            : row.assignedMobitelOfficer.name}\r\n        </TableCell>\r\n        <TableCell>{row.taskStatus}</TableCell>\r\n        <TableCell>\r\n          <Button\r\n            onClick={() => handleHOButtonClick(row.id)}\r\n            startIcon={<InputIcon color=\"inherit\" />}\r\n          >\r\n            <InputIcon onClick={() => handleHOButtonClick(row.id)} />\r\n            {/* <Typography>HO</Typography> */}\r\n          </Button>\r\n        </TableCell>\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box sx={{ margin: 1 }}>\r\n              <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                History\r\n              </Typography>\r\n              <Table size=\"small\" aria-label=\"purchases\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Action</TableCell>\r\n                    <TableCell>Performed by</TableCell>\r\n                    <TableCell>Date</TableCell>\r\n                    <TableCell>Comment</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {row.taskHistory.map((historyRow) => (\r\n                    <TableRow key={historyRow.performedDate}>\r\n                      <TableCell>\r\n                        {historyRow.taskStatus}\r\n                        {historyRow.comStatus}\r\n                        {historyRow.sarStatus}\r\n                        {historyRow.patStatus}\r\n                        {historyRow.onairStatus}\r\n                      </TableCell>\r\n                      <TableCell>{historyRow.performedBy.name}</TableCell>\r\n                      <TableCell component=\"th\" scope=\"row\">\r\n                        {historyRow.performedDate.split(\"T\")[0]}\r\n                      </TableCell>\r\n                      <TableCell>{historyRow.comment}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n\r\n      {/* Handover Popup Model */}\r\n      <Modal\r\n        show={show}\r\n        onHide={modalClose}\r\n        animation={false}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Handover Details</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          {/* update */}\r\n          {show === true ? (\r\n            <Modal.Body>\r\n              <div>\r\n                <Form.Label style={{ fontWeight: \"normal\" }}>\r\n                  Site ID : {row.siteID}\r\n                </Form.Label>\r\n              </div>\r\n              <div>\r\n                <Form.Label style={{ fontWeight: \"normal\" }}>\r\n                  Site Name : {row.siteName}\r\n                </Form.Label>\r\n              </div>\r\n              <div className=\"mb-3\">\r\n                <Form.Label style={{ fontWeight: \"normal\" }}>\r\n                  Task ID : {row.taskRef}\r\n                </Form.Label>\r\n              </div>\r\n\r\n              <div style={{ height: 500 }}>\r\n                <DataGrid\r\n                  rows={row.headerProperties.map((item, index) => ({\r\n                    id: index, // Assuming index can be used as a unique identifier for headerProperties\r\n                    DataField: item,\r\n                    Info: row.properties[index], // both arrays have the same length\r\n                  }))}\r\n                  columns={[\r\n                    { field: \"DataField\", headerName: \"Data Field\", flex: 1 },\r\n                    { field: \"Info\", headerName: \"Info\", flex: 1 },\r\n                  ]}\r\n                  pageSize={15}\r\n                  rowsPerPageOptions={[15]}\r\n                  rowHeight={25}\r\n                  headerHeight={30}\r\n                  components={{ Toolbar: GridToolbar }}\r\n                />\r\n              </div>\r\n            </Modal.Body>\r\n          ) : null}\r\n        </Box>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction AllTasksBody() {\r\n  let [items, setItems] = useState([]);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [page, setPage] = React.useState(0);\r\n  const [searchPage, setSearchPage] = React.useState(0);\r\n  let [openDialog, setOpenDialog] = useState(false);\r\n  const [searchRowsPerPage, setSearchRowsPerPage] = React.useState(10);\r\n  const [totalTasks, setTotalTasks] = useState(0);\r\n  const [searchTotalTasks, setSearchTotalTasks] = useState(0);\r\n  const axiosInstance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setOpenDialog(true);\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axiosInstance.get(\r\n          `projonline/getalltasksfortable?pageSize=${rowsPerPage}&pageNumber=${\r\n            page + 1\r\n          }`,\r\n          {\r\n            headers: {\r\n              token:\r\n                \"Bearer \" +\r\n                JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n            },\r\n          }\r\n        );\r\n\r\n        setItems(response.data.tasks);\r\n        setTotalTasks(response.data.totalTasks);\r\n        setOpenDialog(false);\r\n        // console.log(response.data.tasks);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [rowsPerPage, page]);\r\n\r\n  const fetchTasks = async (url) => {\r\n    try {\r\n      setOpenDialog(true);\r\n\r\n      const response = await axiosInstance.get(url, {\r\n        headers: {\r\n          token:\r\n            \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n        },\r\n      });\r\n      // console.log(response.data.tasks);\r\n      setItems(response.data.tasks);\r\n      setTotalTasks(response.data.totalTasks);\r\n\r\n      setOpenDialog(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setOpenDialog(false);\r\n    }\r\n  };\r\n\r\n  const searchFilter = async () => {\r\n    try {\r\n      setOpenDialog(true);\r\n      console.log(search);\r\n      const response = await axiosInstance.get(\r\n        `projonline/searchtasks?search=${search}`,\r\n        {\r\n          headers: {\r\n            token:\r\n              \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n          },\r\n        }\r\n      );\r\n\r\n      // Set search results to state variable\r\n      setSearchResults(response.data.tasks);\r\n      setSearchTotalTasks(response.data.tasks.length);\r\n      setOpenDialog(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n      setOpenDialog(false);\r\n    }\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n  const handleSearchChangePage = (event, newPage) => {\r\n    setSearchPage(newPage);\r\n  };\r\n\r\n  const handleChangeSearchRowsPerPage = (event) => {\r\n    setSearchRowsPerPage(parseInt(event.target.value, 10));\r\n    setSearchPage(0);\r\n  };\r\n\r\n  // const downloadHandover = (e) => {\r\n  //   //Create Downloadable excel file\r\n  //   var workbook = XLSX.utils.book_new();\r\n\r\n  //   //get selected projects\r\n  //   var worksheetData = [];\r\n  //   var historyData = [];\r\n\r\n  //   for (var i = items.length - 1; i >= 0; i--) {\r\n  //     if (\"assignedSubcon\" in items[i]) {\r\n  //       var companyName = items[i].assignedSubcon.companyName;\r\n  //     } else {\r\n  //       companyName = \"N/A\";\r\n  //     }\r\n  //     if (\"assignedMobitelOfficer\" in items[i]) {\r\n  //       var username = items[i].assignedMobitelOfficer.username;\r\n  //     } else {\r\n  //       var username = \"N/A\";\r\n  //     }\r\n\r\n  //     var data = [\r\n  //       items[i].taskRef,\r\n  //       items[i].siteID,\r\n  //       companyName,\r\n  //       username,\r\n  //       items[i].taskStatus,\r\n  //     ];\r\n  //     worksheetData.unshift(data);\r\n\r\n  //     //history\r\n  //     var history = [];\r\n  //     if (\"taskHistory\" in items[i]) {\r\n  //       var hdata = items[i].taskHistory;\r\n  //       hdata.forEach((e) => {\r\n  //         // history = [items[i].taskRef, e.taskStatus, e.performedBy.name, e.performedDate,e.comment]  // Original Code\r\n  //         history = [\r\n  //           items[i].taskRef,\r\n  //           e.taskStatus,\r\n  //           e.comStatus,\r\n  //           e.sarStatus,\r\n  //           e.patStatus,\r\n  //           e.onairStatus,\r\n  //           e.performedBy.name,\r\n  //           e.performedDate,\r\n  //           e.comment,\r\n  //         ]; // Test Code\r\n\r\n  //         historyData.unshift(history);\r\n  //       });\r\n  //     }\r\n  //   }\r\n  //   // history = ['Task ID','Action','Performed by','Date','Comment']   // Original Code\r\n  //   history = [\r\n  //     \"Task ID\",\r\n  //     \"Action\",\r\n  //     \"Commission Status\",\r\n  //     \"SAR Status\",\r\n  //     \"PAT Status\",\r\n  //     \"On-Air Status\",\r\n  //     \"Performed by\",\r\n  //     \"Date\",\r\n  //     \"Comment\",\r\n  //   ]; // Test Code\r\n\r\n  //   historyData.unshift(history);\r\n\r\n  //   //...\r\n  //   data = [\r\n  //     \"Task ID\",\r\n  //     \"Site ID\",\r\n  //     \"Assigned Subcon\",\r\n  //     \"Assigned Mobitel Officer\",\r\n  //     \"Current Status\",\r\n  //   ];\r\n  //   worksheetData.unshift(data);\r\n\r\n  //   var ws = XLSX.utils.aoa_to_sheet(worksheetData);\r\n  //   var hd = XLSX.utils.aoa_to_sheet(historyData);\r\n  //   XLSX.utils.book_append_sheet(workbook, ws, \"allTask\");\r\n  //   XLSX.utils.book_append_sheet(workbook, hd, \"history\");\r\n  //   XLSX.writeFile(workbook, \"All Tasks.xlsx\");\r\n  // };\r\n\r\n  useEffect(() => {\r\n    fetchTasks(`projonline/getalltasksfortable?pageSize=10&pageNumber=1`);\r\n  }, []);\r\n\r\n  const reloadFunction = async () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleDownload = async () => {\r\n    try {\r\n      const response = await axiosInstance.get(\r\n        \"projonline/downloadAllTasksData\",\r\n        {\r\n          responseType: \"arraybuffer\",\r\n        }\r\n      );\r\n\r\n      const currentDate = new Date();\r\n\r\n      const options = { timeZone: \"Asia/Colombo\" };\r\n\r\n      const formattedDate = currentDate.toLocaleString(\"en-US\", options);\r\n\r\n      saveAs(new Blob([response.data]), `AllTaskExport-${formattedDate}.xlsx`);\r\n    } catch (error) {\r\n      console.error(\"Error downloading file:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {/* Content Wrapper. Contains page content */}\r\n      <div className=\"content-wrapper\">\r\n        <div className=\"content-header\">\r\n          <section className=\"content-header\">\r\n            <div className=\"container-fluid\">\r\n              <div>\r\n                <div>\r\n                  <Container>\r\n                    <Row>\r\n                      <Col xs={2}>\r\n                        <h1>All Tasks</h1>\r\n                      </Col>\r\n\r\n                      <Col xs={7}>\r\n                        <Form.Control\r\n                          className=\"me-auto\"\r\n                          placeholder=\"Search your item here...\"\r\n                          onChange={(e) => setSearch(e.target.value)}\r\n                        />\r\n                      </Col>\r\n                      <Col>\r\n                        <Button variant=\"secondary\" onClick={searchFilter}>\r\n                          Search\r\n                        </Button>\r\n                      </Col>\r\n                      <Col>\r\n                        <div className=\"vr\" />\r\n                      </Col>\r\n                      <Col>\r\n                        <Button variant=\"warning\" onClick={reloadFunction}>\r\n                          Reload\r\n                        </Button>\r\n                      </Col>\r\n                      <Col>\r\n                        {/* <Button\r\n                          variant=\"outline-success\"\r\n                          onClick={downloadHandover}\r\n                        >\r\n                          Dowanload\r\n                        </Button> */}\r\n\r\n                        <Button onClick={handleDownload}>Download</Button>\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            {/* /.container-fluid */}\r\n          </section>\r\n        </div>\r\n        <div>\r\n          <div>\r\n            {searchTotalTasks > 0 ? (\r\n              <div>\r\n                <TableContainer component={Paper}>\r\n                  <Table size=\"small\" aria-label=\"collapsible table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell />\r\n\r\n                        <TableCell>Task ID</TableCell>\r\n\r\n                        <TableCell>Site ID</TableCell>\r\n\r\n                        <TableCell>Assigned Subcon / Vender</TableCell>\r\n\r\n                        <TableCell>Assigned Officer</TableCell>\r\n\r\n                        <TableCell>Current Status</TableCell>\r\n\r\n                        <TableCell>Handover</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n\r\n                    <TableBody>\r\n                      {searchResults\r\n                        .slice(\r\n                          searchPage * searchRowsPerPage,\r\n                          searchPage * searchRowsPerPage + searchRowsPerPage\r\n                        )\r\n                        .map((row) => (\r\n                          <Rows key={row.name} row={row} />\r\n                        ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25, 50, 100]}\r\n                  component=\"div\"\r\n                  count={searchTotalTasks}\r\n                  rowsPerPage={searchRowsPerPage}\r\n                  page={searchPage}\r\n                  onPageChange={handleSearchChangePage}\r\n                  onRowsPerPageChange={handleChangeSearchRowsPerPage}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div>\r\n                <TableContainer component={Paper}>\r\n                  <Table size=\"small\" aria-label=\"collapsible table\">\r\n                    <TableHead>\r\n                      <TableRow>\r\n                        <TableCell />\r\n\r\n                        <TableCell>Task ID</TableCell>\r\n\r\n                        <TableCell>Site ID</TableCell>\r\n\r\n                        <TableCell>Assigned Subcon / Vender</TableCell>\r\n\r\n                        <TableCell>Assigned Officer</TableCell>\r\n\r\n                        <TableCell>Current Status</TableCell>\r\n\r\n                        <TableCell>Handover</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                      {(items > 0\r\n                        ? items.slice(\r\n                            page * rowsPerPage,\r\n                            page * rowsPerPage + rowsPerPage\r\n                          )\r\n                        : items\r\n                      ).map((row) => (\r\n                        <Rows key={row.name} row={row} />\r\n                      ))}\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n                <TablePagination\r\n                  rowsPerPageOptions={[5, 10, 25, 50, 100]}\r\n                  component=\"div\"\r\n                  count={totalTasks}\r\n                  rowsPerPage={rowsPerPage}\r\n                  page={page}\r\n                  onPageChange={handleChangePage}\r\n                  onRowsPerPageChange={handleChangeRowsPerPage}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Dialog\r\n        open={openDialog}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogContent>\r\n          <Box sx={{ display: \"flex\" }}>\r\n            <CircularProgress />\r\n          </Box>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\nexport default withRouter(AllTasksBody);\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["Rows","props","row","open","setOpen","React","show","setShow","useState","selectedTaskData","setSelectedTaskData","handleHOButtonClick","sx","borderBottom","style","height","padding","size","onClick","component","scope","taskRef","siteID","assignedSubcon","companyName","assignedMobitelOfficer","name","taskStatus","id","startIcon","color","paddingBottom","paddingTop","colSpan","in","timeout","unmountOnExit","margin","variant","gutterBottom","taskHistory","map","historyRow","comStatus","sarStatus","patStatus","onairStatus","performedBy","performedDate","split","comment","onHide","animation","closeButton","fontWeight","siteName","className","rows","headerProperties","item","index","DataField","Info","properties","columns","field","headerName","flex","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","withRouter","items","setItems","searchResults","setSearchResults","search","setSearch","rowsPerPage","setRowsPerPage","page","setPage","searchPage","setSearchPage","openDialog","setOpenDialog","searchRowsPerPage","setSearchRowsPerPage","totalTasks","setTotalTasks","searchTotalTasks","setSearchTotalTasks","axiosInstance","axios","baseURL","process","useEffect","async","response","get","headers","token","JSON","parse","localStorage","getItem","accessToken","data","tasks","error","console","log","fetchData","url","fetchTasks","xs","placeholder","onChange","e","target","value","length","window","location","reload","responseType","currentDate","Date","options","timeZone","formattedDate","toLocaleString","saveAs","Blob","Paper","slice","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","display"],"sourceRoot":""}