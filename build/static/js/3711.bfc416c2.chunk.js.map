{"version":3,"file":"static/js/3711.bfc416c2.chunk.js","mappings":"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","sources":["components/AddSpecificUser.jsx","../node_modules/form-data/lib/browser.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Form, Button, Row, Col, Table } from \"react-bootstrap\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport XLSX from \"xlsx\";\nimport FormData from \"form-data\";\nimport Box from \"@mui/material/Box\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Dialog from \"@mui/material/Dialog\";\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction AddSpecificUser(props) {\n  let [users, setUsers] = useState([]);\n  let [companies, setCompanies] = useState([]);\n  let [msg, setMsg] = useState(\"\");\n  let [variant, setVariant] = useState(\"\");\n\n  const axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL,\n  });\n\n  let [form, setForm] = useState({});\n  let [errors, setErrors] = useState({});\n  let [open, setOpen] = useState(false);\n  let [openDialog, setOpenDialog] = useState(false);\n  const [activeStatus, setActiveStatus] = useState(true);\n  const [userCanAssignForTask, setUserCanAssignForTask] = useState(false);\n  const [adminRights, setAdminRights] = useState(false); // Set the default switch state\n\n  let [selectedCompanyCategory, setSelectedCompanyCategory] =\n    useState(\"Choose...\");\n\n  let setField = (field, value) => {\n    setForm({\n      ...form,\n      [field]: value,\n    });\n    if (!!errors[field])\n      setErrors({\n        ...errors,\n        [field]: null,\n      });\n    // console.log(field,value)\n  };\n\n  const findFormErrors = () => {\n    const {\n      name,\n      username,\n      email,\n      company,\n      projectCoordinator,\n      userDiv,\n      visbilityBasedOn,\n      mobileNo,\n      verificationOneId,\n      verificationTwoId,\n      approvalId,\n    } = form;\n    const newErrors = {};\n    // name errors\n\n    if (company === \"Mobitel\" && (userDiv === \"Choose...\" || !userDiv))\n      newErrors.userDiv = \"Choose a division!\";\n    if (\n      company === \"Mobitel\" &&\n      (visbilityBasedOn === \"Choose...\" || !visbilityBasedOn)\n    )\n      newErrors.visbilityBasedOn = \"Choose a option!\";\n    //if ( company === 'Mobitel' && (projectCoordinator === 'Choose...' || !projectCoordinator)) newErrors.projectCoordinator = 'Choose a project Coordinator!'\n    if (!email || email === \"\") newErrors.email = \"cannot be blank!\";\n    if (!company || company === \"Choose...\")\n      newErrors.company = \"Select a option!\";\n    if (!name || name === \"\") newErrors.name = \"cannot be blank!\";\n    if (!username || username === \"\") newErrors.username = \"cannot be blank!\";\n    if (!mobileNo || mobileNo === \"\") newErrors.mobileNo = \"cannot be blank!\";\n\n    return newErrors;\n  };\n\n  useEffect(() => {\n    axiosInstance\n      .get(\"projonline/users\", {\n        headers: {\n          token:\n            \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n        },\n      })\n      .then((res) => {\n        // console.log(res.data);\n        setUsers(\n          res.data.users.filter((obj) => obj.company.companyName === \"Mobitel\")\n        );\n\n        // console.log(res);\n        setCompanies(res.data.companys);\n\n        setForm({\n          adminRights: false,\n          activeStatus: false,\n          userCanAssignForTask: false,\n          isProjectCoordinator: false,\n          verificationOneId: \"1\",\n          verificationTwoId: \"1\",\n          approvalId: \"1\",\n        });\n        return;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    const newErrors = findFormErrors();\n    // Conditional logic:\n    if (Object.keys(newErrors).length > 0) {\n      // We got errors!\n      setErrors(newErrors);\n    } else {\n      // console.log(form.company)\n      var userObject = {};\n      if (form.company === \"Mobitel\") {\n        var approvalPath = [\n          form.verificationOneId,\n          form.verificationTwoId,\n          form.approvalId,\n        ]\n          .filter((element) => element !== \"1\")\n          .filter((element) => element !== \"2\");\n        // console.log(approvalPath)\n\n        userObject = {\n          name: form.name,\n          email: form.email,\n          company: companies.find((item) => item.companyName === form.company)\n            ._id,\n          userDiv: form.userDiv,\n          mobileNo: form.mobileNo,\n          username: form.username,\n          adminRights: adminRights,\n          activeStatus: activeStatus,\n          userCanAssignForTask: userCanAssignForTask,\n          visbilityBasedOn: form.visbilityBasedOn,\n          projectCoordinator:\n            form.projectCoordinator == \"1\" ? null : form.projectCoordinator,\n          isProjectCoordinator: form.isProjectCoordinator,\n          approvalPath: approvalPath,\n        };\n      } else {\n        userObject = {\n          name: form.name,\n          email: form.email,\n          company: companies.find((item) => item.companyName === form.company)\n            ._id,\n          mobileNo: form.mobileNo,\n          username: form.username,\n          adminRights: adminRights,\n          activeStatus: activeStatus,\n          visbilityBasedOn: companies.find(\n            (item) => item.companyName === form.company\n          ).companyCategory,\n          userCanAssignForTask: userCanAssignForTask,\n          approvalPath: [],\n        };\n      }\n\n      axiosInstance\n        .post(\"projonline/signup\", userObject, {\n          headers: {\n            token:\n              \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n          },\n        })\n        .then((res) => {\n          setOpenDialog(true);\n          setTimeout(() => {\n            setMsg(res.data.msg);\n            setVariant(res.data.variant);\n            setOpen(true);\n          }, 2000);\n\n          setTimeout(() => {\n            setOpenDialog(false);\n            setOpen(false);\n            props.history.push({ pathname: \"/updateUser\" });\n          }, 5000);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleCompanyChange = (selectedCompany) => {\n    // Find the selected company object from the companies array\n    const selectedCompanyObj = companies.find(\n      (company) => company.companyName === selectedCompany\n    );\n\n    // Update the company category in the selected company object\n    if (selectedCompanyObj) {\n      setSelectedCompanyCategory(selectedCompanyObj.companyCategory);\n    }\n  };\n\n  return (\n    <div>\n      {/* Content Wrapper. Contains page content */}\n      <div className=\"content-wrapper\">\n        {/* Content Header (Page header) */}\n        <div className=\"content-header\">\n          <section className=\"content-header\">\n            <div className=\"container-fluid\">\n              <div className=\"row mb-2\">\n                <div className=\"col-sm-6\">\n                  <h1>Add New user</h1>\n                </div>\n              </div>\n            </div>\n            {/* /.container-fluid */}\n          </section>\n        </div>\n        {/* /.content-header */}\n        {/* Main content */}\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <form onSubmit={onSubmit} enctype=\"multipart/form-data\">\n              <Row className=\"mb-3\">\n                <Form.Group as={Col}>\n                  <Form.Label>Name</Form.Label>\n                  <Form.Control\n                    onChange={(e) => setField(\"name\", e.target.value)}\n                    value={form.name}\n                    className=\"col-md-9\"\n                    type=\"text\"\n                    isInvalid={!!errors.name}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.name}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Username</Form.Label>\n                  <Form.Control\n                    onChange={(e) => setField(\"username\", e.target.value)}\n                    value={form.username}\n                    className=\"col-md-9\"\n                    type=\"text\"\n                    isInvalid={!!errors.username}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.username}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Email</Form.Label>\n                  <Form.Control\n                    onChange={(e) => setField(\"email\", e.target.value)}\n                    value={form.email}\n                    className=\"col-md-9\"\n                    type=\"text\"\n                    isInvalid={!!errors.email}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.email}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n\n              <Row className=\"mb-3\">\n                <Form.Group as={Col}>\n                  <Form.Label>Company</Form.Label>\n\n                  {/* onChange={(e) => handleCompanyChange(e.target.value)} */}\n                  <Form.Control\n                    onChange={(e) => {\n                      setField(\"company\", e.target.value);\n                      handleCompanyChange(e.target.value);\n                    }}\n                    value={form.company}\n                    className=\"col-md-9\"\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.company}\n                  >\n                    <option>Choose...</option>\n                    {companies.map((opt) => (\n                      <option value={opt.companyName} key={opt.companyName}>\n                        {opt.companyName}\n                      </option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.company}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>User Division</Form.Label>\n                  <Form.Control\n                    onChange={(e) => setField(\"userDiv\", e.target.value)}\n                    value={form.userDiv}\n                    className=\"col-md-9\"\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.userDiv}\n                    disabled={form.company !== \"Mobitel\" ? true : false}\n                  >\n                    <option value=\"Choose...\">Choose...</option>\n                    <option>Planning_Radio</option>\n                    <option>Planning_Core</option>\n                    <option>Planning_TX</option>\n                    <option>Planning_IBS</option>\n                    <option>Planning_WiFi</option>\n                    <option>Project_Radio</option>\n                    <option>Project_Core</option>\n                    <option>Project_TX</option>\n                    <option>Project_IBS</option>\n                    <option>Project_WiFi</option>\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.userDiv}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Mobile No</Form.Label>\n                  <Form.Control\n                    onChange={(e) => setField(\"mobileNo\", e.target.value)}\n                    value={form.mobileNo}\n                    className=\"col-md-9\"\n                    type=\"number\"\n                    isInvalid={!!errors.mobileNo}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.mobileNo}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n\n              <Row className=\"mb-3\">\n                <Form.Group as={Col}>\n                  <Form.Label>Visibility Based On</Form.Label>\n                  <Form.Control\n                    onChange={(e) =>\n                      setField(\"visbilityBasedOn\", e.target.value)\n                    }\n                    value={\n                      form.company !== \"Mobitel\"\n                        ? \"company\"\n                        : form.visbilityBasedOn\n                    }\n                    className=\"col-md-9\"\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.visbilityBasedOn}\n                    disabled={form.company !== \"Mobitel\" ? true : false}\n                  >\n                    <option>{selectedCompanyCategory}</option>\n\n                    <option value=\"Admin\">Admin</option>\n                    <option value=\"Planning\">Planning</option>\n                    <option value=\"Project_Div_Head\">Project_Div_Head</option>\n                    <option value=\"Project_PM\">Project_PM</option>\n                    <option value=\"Project_TO\">Project_TO</option>\n                    <option value=\"Project_Coor\">Project_Coor</option>\n                    <option value=\"Subcon\">Subcon</option>\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.visbilityBasedOn}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Project Coordinator</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    onChange={(e) =>\n                      setField(\"projectCoordinator\", e.target.value)\n                    }\n                    value={form.projectCoordinator}\n                    className=\"col-md-9\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.visbilityBasedOn}\n                    disabled={form.company !== \"Mobitel\" ? true : false}\n                  >\n                    <option value=\"1\">Choose...</option>\n                    {users\n                      .filter((obj) => obj.isProjectCoordinator === true)\n                      .map((opt) => (\n                        <option value={opt._id}>{opt.name}</option>\n                      ))}\n                  </Form.Control>\n\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.projectCoordinator}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Is Project Coordinator</Form.Label>\n                  <Form.Check\n                    onChange={(e) =>\n                      setField(\n                        \"isProjectCoordinator\",\n                        !form.isProjectCoordinator\n                      )\n                    }\n                    value={form.isProjectCoordinator}\n                    checked={form.isProjectCoordinator}\n                    className=\"col-md-9\"\n                    id=\"custom-switch-4\"\n                    type=\"switch\"\n                    disabled={form.company !== \"Mobitel\" ? true : false}\n                  />\n                </Form.Group>\n              </Row>\n\n              <Row className=\"mb-3\">\n                <Form.Group as={Col}>\n                  <Form.Label>Admin Rights</Form.Label>\n                  <Form.Check\n                    onChange={(e) => {\n                      setField(\"adminRights\", !adminRights); // Update the form state\n                      setAdminRights(!adminRights); // Update the switch state\n                    }}\n                    value={adminRights} // Use adminRights here\n                    checked={adminRights} // Use adminRights here\n                    className=\"col-md-9\"\n                    id=\"custom-switch-1\"\n                    type=\"switch\"\n                    // disabled={form.company !== \"Mobitel\"}\n                  />\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Active Status</Form.Label>\n                  <Form.Check\n                    onChange={(e) => setActiveStatus(!activeStatus)} // Toggle the switch state\n                    value={activeStatus} // Use activeStatus here\n                    checked={activeStatus} // Use activeStatus here\n                    className=\"col-md-9\"\n                    id=\"custom-switch-2\"\n                    type=\"switch\"\n                  />\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>User Can Assign For Task</Form.Label>\n                  <Form.Check\n                    onChange={(e) =>\n                      setUserCanAssignForTask(!userCanAssignForTask)\n                    } // Toggle the switch state\n                    value={userCanAssignForTask} // Use userCanAssignForTask here\n                    checked={userCanAssignForTask} // Use userCanAssignForTask here\n                    className=\"col-md-9\"\n                    id=\"custom-switch-3\"\n                    type=\"switch\"\n                    // disabled={form.company !== \"Mobitel\"}\n                  />\n                </Form.Group>\n              </Row>\n\n              <Row>\n                <Form.Group as={Col}>\n                  <Form.Label>Verification by (Level 1)</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    className=\"col-md-9\"\n                    onChange={(e) =>\n                      setField(\"verificationOneId\", e.target.value)\n                    }\n                    value={form.verificationOneId}\n                    isInvalid={!!errors.verificationOneId}\n                    defaultValue=\"Choose...\"\n                    disabled={userCanAssignForTask === true ? false : true}\n                  >\n                    <option value=\"1\">Choose...</option>\n                    {users.map((opt) => (\n                      <option value={opt._id}>{opt.name}</option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.verificationOneId}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Verification by (Level 2)</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    className=\"col-md-9\"\n                    onChange={(e) =>\n                      setField(\"verificationTwoId\", e.target.value)\n                    }\n                    value={form.verificationTwoId}\n                    isInvalid={!!errors.verificationTwoId}\n                    defaultValue=\"Choose...\"\n                    disabled={userCanAssignForTask === true ? false : true}\n                  >\n                    <option value=\"1\">Choose...</option>\n                    <option value=\"2\">Not Applicable</option>\n                    {users.map((opt) => (\n                      <option value={opt._id}>{opt.name}</option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.verificationTwoId}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}>\n                  <Form.Label>Approval by</Form.Label>\n                  <Form.Control\n                    as=\"select\"\n                    className=\"col-md-9\"\n                    onChange={(e) => setField(\"approvalId\", e.target.value)}\n                    value={form.approvalId}\n                    isInvalid={!!errors.approvalId}\n                    defaultValue=\"Choose...\"\n                    disabled={userCanAssignForTask === true ? false : true}\n                  >\n                    <option value=\"1\">Choose...</option>\n                    {users.map((opt) => (\n                      <option value={opt._id}>{opt.name}</option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.approvalId}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n              <Button variant=\"primary\" type=\"submit\">\n                Add a New User\n              </Button>\n            </form>\n          </div>\n          {/* /.container-fluid */}\n        </section>\n        {/* /.content */}\n      </div>\n\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n      >\n        <Alert onClose={handleClose} severity={variant} sx={{ width: \"100%\" }}>\n          {msg}\n        </Alert>\n      </Snackbar>\n\n      <Dialog\n        open={openDialog}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogContent>\n          <Box sx={{ display: \"flex\" }}>\n            <CircularProgress />\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default withRouter(AddSpecificUser);\n","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n"],"names":["Alert","React","props","ref","elevation","variant","withRouter","useState","users","setUsers","companies","setCompanies","msg","setMsg","setVariant","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","openDialog","setOpenDialog","activeStatus","setActiveStatus","userCanAssignForTask","setUserCanAssignForTask","adminRights","setAdminRights","selectedCompanyCategory","setSelectedCompanyCategory","setField","field","value","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","filter","obj","company","companyName","companys","isProjectCoordinator","verificationOneId","verificationTwoId","approvalId","catch","err","console","log","handleClose","event","reason","className","onSubmit","e","preventDefault","newErrors","name","username","email","userDiv","projectCoordinator","visbilityBasedOn","mobileNo","findFormErrors","Object","keys","length","userObject","approvalPath","element","find","item","_id","companyCategory","post","setTimeout","history","push","pathname","error","enctype","as","Col","onChange","target","type","isInvalid","selectedCompany","selectedCompanyObj","handleCompanyChange","defaultValue","map","opt","disabled","checked","id","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","display","module","exports","self","FormData","window"],"sourceRoot":""}