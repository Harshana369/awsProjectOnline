{"version":3,"file":"static/js/6872.bbfceab9.chunk.js","mappings":"sPAyIA,WAAeA,EAAAA,EAAAA,KA9Hf,SAA0BC,GACxB,OAAkCC,EAAAA,EAAAA,WAAS,GAAM,eAA5CC,EAAU,KAAEC,EAAa,KAC9B,GAAwBF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KACdC,EAAgBC,IAAAA,OAAa,CACjCC,QAASC,2DA2EX,OAxEAC,EAAAA,EAAAA,YAAU,WACRP,GAAc,GACdG,EACGK,IAAI,0CAA2C,CAC9CC,QAAS,CACPC,MACE,UAAYC,KAAKC,MAAMC,aAAaC,QAAQ,SAASC,eAG1DC,MAAK,SAACC,GACLf,EAASe,EAAIC,KAAKC,OAElBnB,GAAc,EAEhB,IACCoB,OAAM,SAACC,GACNC,QAAQC,IAAIF,EACd,GACJ,GAAG,KAuDD,4BAEE,iBAAKG,UAAU,kBAAiB,WAC9B,gBAAKA,UAAU,iBAAgB,UAC7B,oBAASA,UAAU,iBAAgB,UACjC,gBAAKA,UAAU,kBAAiB,UAC9B,gBAAKA,UAAU,WAAU,UACvB,gBAAKA,UAAU,WAAU,UACvB,wBAAI,8BAQd,gBAAKC,MAAO,CAAEC,OAAQ,IAAKC,MAAO,QAAS,UACzC,SAAC,MAAQ,CACPC,SAAU,SAACC,GAAI,OAAKA,EAAKC,GAAG,EAC5BC,KAAM9B,EACN+B,QApEM,CACd,CAAEC,MAAO,UAAWC,WAAY,UAAWP,MAAO,KAClD,CAAEM,MAAO,SAAUC,WAAY,UAAWP,MAAO,KAEjD,CACEM,MAAO,cACPC,WAAY,2BACZP,MAAO,IACPQ,YAAa,SAACC,GAAM,OAAKA,EAAOC,IAAIC,eAAeC,WAAW,GAIhE,CACEN,MAAO,yBACPC,WAAY,mBACZP,MAAO,IACPQ,YAAa,SAACC,GAAM,OAAKA,EAAOC,IAAIG,uBAAuBC,IAAI,IAqDzDC,SAAU,GACVC,mBAAoB,CAAC,IACrBC,UAAW,GACXC,aAAc,GACdC,WAAY,CAAEC,QAASC,EAAAA,aAK7B,SAAC,IAAM,CACLC,KAAMlD,EACNmD,QAzCc,SAACC,EAAOC,GACX,cAAXA,GAIJpD,GAAc,EAChB,EAoCM,kBAAgB,qBAChB,mBAAiB,2BAA0B,UAE3C,SAAC,IAAa,WACZ,SAAC,IAAG,CAACqD,GAAI,CAAEC,QAAS,QAAS,UAC3B,SAAC,IAAgB,YAM7B,G","sources":["components/WithdrawTaskBody.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\nimport style from \"./style.css\";\nimport { Button } from \"@mui/material\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Box from \"@mui/material/Box\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nfunction WithdrawTaskBody(props) {\n  let [openDialog, setOpenDialog] = useState(false);\n  let [items, setItems] = useState([]);\n  const axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL,\n  });\n\n  useEffect(() => {\n    setOpenDialog(true);\n    axiosInstance\n      .get(\"projonline/gettasks/alreadyWithdrawTask\", {\n        headers: {\n          token:\n            \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\n        },\n      })\n      .then((res) => {\n        setItems(res.data.tasks);\n        // console.log(res.data.tasks)\n        setOpenDialog(false);\n        return;\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n\n  // const handleClick=(event, cellValues)=>{\n  //     // console.log(cellValues)\n  //     props.history.push({pathname:'/raisePrSpecificTask', data: cellValues})\n  // }\n\n  const columns = [\n    { field: \"taskRef\", headerName: \"Task ID\", width: 350 },\n    { field: \"siteID\", headerName: \"Site ID\", width: 130 },\n    // { field: 'companyName', headerName: 'Assigned Subcon', width:210, valueGetter: (params) => params.row.assignedSubcon.companyName,},  // this line comment by Manod. following line created instead if this\n    {\n      field: \"companyName\",\n      headerName: \"Assigned Subcon / Vender\",\n      width: 290,\n      valueGetter: (params) => params.row.assignedSubcon.companyName,\n    },\n\n    // { field: 'assignedMobitelOfficer', headerName: 'Assinged Mobitel Officer', width:270, valueGetter: (params) => params.row.assignedMobitelOfficer.name},  // this line comment by Manod. following line created instead if this\n    {\n      field: \"assignedMobitelOfficer\",\n      headerName: \"Assinged Officer\",\n      width: 250,\n      valueGetter: (params) => params.row.assignedMobitelOfficer.name,\n    },\n\n    // { field: 'taskRaisedDate', headerName: 'Initiated date', width:180, valueGetter: (params) => params.row.taskHistory.find(x=>x.taskStatus==='Subcon allocated').performedDate.split('T')[0]},  // this line comment by Manod. following line created instead if this\n    // { field: 'taskRaisedDate', headerName: 'Initiated date', width:180,},  // again commented by Manod (Not required)\n\n    // { field: \"To Raise PR\", width:150,\n    //     renderCell: (cellValues) => {\n    //         return (\n    //         <Button\n    //             variant=\"contained\"\n    //             color=\"primary\"\n    //             onClick={(event) => {\n    //             handleClick(event, cellValues);\n    //             }}\n    //         >\n    //             To Raise PR\n    //         </Button>\n    //         );\n    //     }\n    // }\n  ];\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenDialog(false);\n  };\n\n  return (\n    <div>\n      {/* Content Wrapper. Contains page content */}\n      <div className=\"content-wrapper\">\n        <div className=\"content-header\">\n          <section className=\"content-header\">\n            <div className=\"container-fluid\">\n              <div className=\"row mb-2\">\n                <div className=\"col-sm-6\">\n                  <h1>Withdraw Tasks</h1>\n                </div>\n              </div>\n            </div>\n            {/* /.container-fluid */}\n          </section>\n        </div>\n\n        <div style={{ height: 610, width: \"100%\" }}>\n          <DataGrid\n            getRowId={(item) => item._id}\n            rows={items}\n            columns={columns}\n            pageSize={15}\n            rowsPerPageOptions={[15]}\n            rowHeight={30}\n            headerHeight={40}\n            components={{ Toolbar: GridToolbar }}\n          />\n        </div>\n      </div>\n\n      <Dialog\n        open={openDialog}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogContent>\n          <Box sx={{ display: \"flex\" }}>\n            <CircularProgress />\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default withRouter(WithdrawTaskBody);\n"],"names":["withRouter","props","useState","openDialog","setOpenDialog","items","setItems","axiosInstance","axios","baseURL","process","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","tasks","catch","err","console","log","className","style","height","width","getRowId","item","_id","rows","columns","field","headerName","valueGetter","params","row","assignedSubcon","companyName","assignedMobitelOfficer","name","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","open","onClose","event","reason","sx","display"],"sourceRoot":""}