{"version":3,"file":"static/js/1204.49ae8cac.chunk.js","mappings":"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","sources":["components/CreateProjectTemplate.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios'\nimport { Form, Button, Row, Col } from 'react-bootstrap';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport XLSX from 'xlsx'\nimport Box from '@mui/material/Box';\nimport DialogContent from '@mui/material/DialogContent';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Dialog from '@mui/material/Dialog'\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nconst EXTENSIONS = ['csv', 'xls', 'xlsx']\n\nfunction CreateProjectTemplate(props) {\n\n    let [companies, setCompanies] = useState([]);\n    let [rates, setRates] = useState([]);\n    let [file, setFile] = useState();\n    let [headersConfig, setHeadersConfig] = useState([]);\n    let [alart, setAlart] = useState(\"\");\n    let [severity, setSeverity] = useState(\"\");\n    let [projects, setProjects] = useState([])\n    let [users, setUsers] = useState([]);\n    let [openDialog, setOpenDialog] = useState(false);\n    const axiosInstance = axios.create({\n        baseURL: process.env.REACT_APP_BACKEND_URL,\n    })\n\n    const handleCloseLoading = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    }\n\n\n    let [form, setForm] = useState({})\n    let [errors, setErrors] = useState({})\n    let [open, setOpen] = useState(false);\n\n    let setField = (field, value) => {\n        setForm({\n            ...form,\n            [field]: value\n        })\n        if (!!errors[field]) setErrors({\n            ...errors,\n            [field]: null\n        })\n    }\n\n    const findFormErrors = () => {\n        const { subProject, project } = form\n        const newErrors = {}\n        // name errors\n        if (!subProject || subProject === '') newErrors.subProject = 'cannot be blank!'\n        if (!project || project === '') newErrors.project = 'cannot be blank!'\n        if (!headersConfig || headersConfig.length === 0) newErrors.file = 'Attachment missing!'\n        // console.log(headersConfig);\n        // console.log(newErrors)\n        return newErrors\n    }\n\n    useEffect(() => {\n        axiosInstance.get('projonline/users',{headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res=>{\n            \n            setCompanies(res.data.companys.filter((obj) => (obj.companyName !== 'Mobitel')))\n            setProjects(res.data.projects)\n\n            setField('projectID', res.data.projects.length + 1)\n\n            return\n        }).catch(err => {\n            console.log(err)\n        })\n\n        axiosInstance.get('projonline/mobitelusers', {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n            // const result = \n            // console.log(res.data)\n            setUsers(res.data)\n\n            return\n        }).catch(err => {\n            console.log(err)\n        })\n\n    }, [])\n\n\n\n\n    const convertToJson = (headers, fileData) => {\n        const rows = []\n        fileData.forEach((row, i) => {\n\n            let rowData = {}\n            rowData['id'] = i\n            row.forEach((element, index) => {\n                rowData[headers[index]] = element\n            })\n            rows.push(rowData)\n        })\n        return rows\n    }\n\n    const getExtention = (file) => {\n        const parts = file.name.split('.')\n        const extension = parts[parts.length - 1]\n        return EXTENSIONS.includes(extension)\n    }\n\n    const importExcel = (e) => {\n        const file = e.target.files[0]\n\n        setErrors({\n            ...errors,\n            file: null\n        })\n\n        const reader = new FileReader()\n        reader.onload = (e) => {\n\n            //parse data\n            const bstr = e.target.result\n            const workBook = XLSX.read(bstr, { type: 'binary' })\n\n            //get First Sheet\n            const workSheetName = workBook.SheetNames[0]\n            const workSheet = workBook.Sheets[workSheetName]\n            //convert to array\n            const fileData = XLSX.utils.sheet_to_json(workSheet, { header: 1 })\n            const header = fileData[0]\n            const headers = []\n\n            if (fileData[0][1] === \"Site ID\" && fileData[0][2] === \"Site Name\") {\n                for (var i = 0; i < fileData[0].length; i++) {\n                    let element = { field: fileData[0][i], headerName: fileData[0][i], minWidth: 150, flex: 1 };\n                    headers.push(element);\n                }\n                setHeadersConfig(headers)\n\n                fileData.splice(0, 1)\n                setRates(convertToJson(header, fileData))\n                // console.log(rates)\n            } else {\n                setOpen(true)\n                setSeverity(\"error\")\n                setAlart(\"Site ID and Site Name should be in Column No 2 and 3\")\n                setRates([])\n                setHeadersConfig([])\n            }\n\n\n        }\n        if (file) {\n            if (getExtention(file)) {\n                reader.readAsBinaryString(file)\n\n            } else {\n                alert(\"Invalid file\")\n            }\n        } else {\n            setRates([])\n        }\n\n    }\n\n\n    const onSubmit = (e) => {\n        e.preventDefault()\n        setOpenDialog(true)\n        const newErrors = findFormErrors()\n        // Conditional logic:\n        if (Object.keys(newErrors).length > 0) {\n            // We got errors!\n            setErrors(newErrors)\n            setOpenDialog(false)\n        } else {\n            const taskObject = {\n                projectID: form.projectID,\n                subProject: form.subProject,\n                project: form.project,\n                properties: headersConfig.map(item => item.field),\n                assignedProjectManager:form.assignedProjectManager,\n                taskStatus: \"Project template created\"\n            };\n\n            // console.log(taskObject)\n\n            axiosInstance.post('projonline/addProjectTemplate', taskObject,{headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}})\n                .then((res) => {\n                    // console.log(res.data.msg)\n                    setAlart(res.data.msg)\n                    setSeverity(res.data.variant)\n                    setOpen(true)\n                    setForm({\n                        'project': '',\n                        'subProject': '',\n                        'projectID': '',\n                        'assignedProjectManager': '',\n                    })\n                    setRates([])\n                    setHeadersConfig([])\n                    setOpenDialog(false)\n                }).catch((error) => {\n                    console.log(error)\n                });\n        }\n\n\n    }\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n\n\n    return (\n        <div>\n\n            {/* Content Wrapper. Contains page content */}\n            <div className=\"content-wrapper\">\n                {/* Content Header (Page header) */}\n                <div className=\"content-header\">\n                    <section className=\"content-header\">\n                        <div className=\"container-fluid\">\n                            <div className=\"row mb-2\">\n                                <div className=\"col-sm-6\">\n                                    <h1>Upload New Project Temptate</h1>\n                                </div>\n                            </div>\n                        </div>{/* /.container-fluid */}\n                    </section>\n                </div>\n                {/* /.content-header */}\n                {/* Main content */}\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <Form onSubmit={onSubmit}>\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>Project ID</Form.Label>\n                                    <Form.Control disabled onChange={e => setField('projectID', e.target.value)} value={form.projectID} className=\"col-md-9\" type=\"text\" placeholder=\"Enter Project Name\" isInvalid={!!errors.projectID} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.projectID}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <Form.Group as={Col} >\n                                    <Form.Label>Project Manager</Form.Label>\n                                    <Form.Control onChange={e => setField('assignedProjectManager', e.target.value)} value={form.assignedProjectManager} className=\"col-md-9\" as=\"select\" defaultValue=\"Choose...\" isInvalid={!!errors.assignedProjectManager} >\n                                        <option>Choose...</option>\n                                        {users.map((user) => {\n                                            return (<option value={user._id}>{user.name}</option>)\n                                        })}\n                                    </Form.Control>\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.assignedMobitelOfficer}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                                \n                            </Row>\n\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>Project Name</Form.Label>\n                                    <Form.Control onChange={e => setField('project', e.target.value)} value={form.project} className=\"col-md-9\" type=\"text\" placeholder=\"Enter Project Name\" isInvalid={!!errors.project} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.project}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                                <Form.Group as={Col} >\n                                    <Form.Label>Sub-Project Name</Form.Label>\n                                    <Form.Control onChange={e => setField('subProject', e.target.value)} value={form.subProject} className=\"col-md-9\" type=\"text\" placeholder=\"Enter Sub-Project Name\" isInvalid={!!errors.subProject} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.subProject}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n\n                            </Row>\n\n                            <Row className=\"mb-3\">\n                                <Form.Group as={Col} >\n                                    <Form.Label>Upload the project HO template</Form.Label>\n                                    <Form.Control onChange={importExcel} type=\"file\" isInvalid={!!errors.file} />\n                                    <Form.Control.Feedback type='invalid'>\n                                        {errors.file}\n                                    </Form.Control.Feedback>\n                                </Form.Group>\n                            </Row>\n                            <Row className=\"mb-3\">\n                                <Button variant=\"primary\" type=\"submit\">\n                                    Create the template\n                                </Button>\n                            </Row>\n\n                        </Form>\n\n                        <div style={{ height: 610, width: '100%' }}>\n                            <DataGrid\n                                getRowId={(item) => item.id}\n                                rows={rates}\n                                columns={headersConfig}\n                                pageSize={15}\n                                rowsPerPageOptions={[15]}\n                                rowHeight={30}\n                                headerHeight={40}\n                                components={{ Toolbar: GridToolbar }}\n                            />\n\n                        </div>\n                    </div>{/* /.container-fluid */}\n                </section>\n                {/* /.content */}\n\n\n            </div>\n\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\n                <Alert onClose={handleClose} severity={severity} sx={{ width: '100%' }} >\n                    {alart}\n                </Alert>\n            </Snackbar>\n            <Dialog\n                open={openDialog}\n                onClose={handleCloseLoading}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogContent>\n                    <Box sx={{ display: 'flex' }}>\n                        <CircularProgress />\n                    </Box>\n\n\n                </DialogContent>\n            </Dialog>\n\n\n\n        </div>\n    )\n}\n\nexport default withRouter(CreateProjectTemplate)"],"names":["Alert","React","props","ref","elevation","variant","EXTENSIONS","withRouter","useState","setCompanies","rates","setRates","headersConfig","setHeadersConfig","alart","setAlart","severity","setSeverity","setProjects","users","setUsers","openDialog","setOpenDialog","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","setField","field","value","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","companys","filter","obj","companyName","projects","length","catch","err","console","log","handleClose","event","reason","className","onSubmit","e","preventDefault","newErrors","subProject","project","file","findFormErrors","Object","keys","taskObject","projectID","properties","map","item","assignedProjectManager","taskStatus","post","msg","error","as","Col","disabled","onChange","target","type","placeholder","isInvalid","defaultValue","user","_id","name","assignedMobitelOfficer","files","reader","FileReader","onload","bstr","result","workBook","XLSX","workSheetName","SheetNames","workSheet","Sheets","fileData","header","i","element","headerName","minWidth","flex","push","splice","rows","forEach","row","rowData","index","convertToJson","parts","split","extension","includes","getExtention","alert","readAsBinaryString","style","height","width","getRowId","id","columns","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","display"],"sourceRoot":""}