{"version":3,"file":"static/js/8482.6bf9dd3a.chunk.js","mappings":"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","sources":["components/ApprovedHandoverChangesBody.jsx","webpack://frontend/./src/components/style.css?15d9"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\nimport { withRouter } from 'react-router-dom'\nimport axios from 'axios';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport style from './style.css'\nimport { Select, MenuItem } from '@mui/material';\nimport { Button, Modal, Form, Row, Col } from 'react-bootstrap';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert from '@mui/material/Alert';\nimport Dialog from '@mui/material/Dialog';\nimport Box from '@mui/material/Box';\nimport DialogContent from '@mui/material/DialogContent';\nimport CircularProgress from '@mui/material/CircularProgress'\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nfunction ApprovedHandoverChangesBody() {\n\n    let [items, setItems] = useState([])\n    let [item, setItem] = useState([])\n    let [properties, setProperties] = useState([])\n    let [headerProperties, setHeaderProperties] = useState([])\n    let [open, setOpen] = useState(false)\n    let [severity, setSeverity] = useState(\"\")\n    let [alart, setAlart] = useState(\"\")\n    let [errors, setErrors] = useState({})\n    let [openDialog, setOpenDialog] = useState(false);\n\n    const handleChange = (e, index) => {\n        setProperties({ ...properties, [index]: e.target.value });\n    };\n\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = (row) => {\n        setItem(row)\n        setProperties(row.newProperties)\n        setHeaderProperties(row.headerProperties)\n        setShow(true);\n    }\n    const axiosInstance = axios.create({\n        baseURL: process.env.REACT_APP_BACKEND_URL,\n    })\n\n    useEffect(() => {\n        getData()\n    }, [])\n\n   \n\n\n    const getData = () => {\n        setOpenDialog(true)\n        axiosInstance.get('projonline/allhandoverchanges/approved', {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n            setItems(res.data)\n            setOpenDialog(false)\n            //console.log(res.data)\n            return\n        }).catch(err => {\n            console.log(err)\n        })\n    };\n\n    const alertClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    const handleSubmit = () => {\n            \n            axiosInstance.put(`projonline/updatehandoverchanges/${item._id}`, {\n                status: 'Change Acknowledged'\n            }, {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n                axiosInstance.put(`projonline/update/${item.taskRefID}`, {\n                    taskObject: {\n                    },\n                    taskHistory: {\n                        taskStatus: 'Change Acknowledged',\n                    },\n\n                }, {headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res => {\n                    setOpen(true)\n                    setSeverity(\"success\")\n                    setAlart('Change Acknowledged')\n                    setShow(false)\n                    getData()\n                    return\n                }).catch(err => {\n                    console.log(err)\n                    setOpen(true)\n                    setSeverity(\"error\")\n                    setAlart(\"Error occured\")\n                })\n            }).catch(err => {\n                console.log(err)\n            })\n        \n    }\n\n   \n\n \n\n\n    const columns = [\n        { field: 'taskRef', headerName: 'TaskID', width: 250 },\n        { field: 'siteID', headerName: 'SiteID', width: 150 },\n        { field: 'siteName', headerName: 'Site Name', width: 175 },\n        { field: 'project', headerName: 'Project', width: 250 },\n        { field: 'subProject', headerName: 'Sub Project', width: 250 },\n        {\n            field: \"Recently Approved Handover Changes\", width: 250, align: 'center',\n            renderCell: (cellValues) => {\n                return (\n                    <Button\n                        variant=\"primary\"\n                        style={{ width: 100 }}\n                        onClick={() => handleShow(cellValues.row)}\n                    >\n                        Show\n                    </Button>\n                );\n            }\n        }\n\n    ];\n\n    return (\n        <div>\n            {/* Content Wrapper. Contains page content */}\n            <div className=\"content-wrapper\">\n\n                <div className=\"content-header\">\n                    <section className=\"content-header\">\n                        <div className=\"container-fluid\">\n                            <div className=\"row mb-2\">\n                                <div className=\"col-sm-6\">\n                                    <h1>Recently Approved Handover Changes</h1>\n                                </div>\n                            </div>\n                        </div>{/* /.container-fluid */}\n                    </section>\n                </div>\n\n                <div style={{ height: 610, width: '100%' }}>\n                    <DataGrid\n                        getRowId={(item) => item._id}\n                        rows={items}\n                        columns={columns}\n                        pageSize={15}\n                        rowsPerPageOptions={[15]}\n                        rowHeight={30}\n                        headerHeight={40}\n                        components={{ Toolbar: GridToolbar, }}\n                    />\n\n                </div>\n\n\n            </div>\n            <Modal show={show} onHide={handleClose} size=\"lg\" animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit Handover</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form onSubmit={handleClose}>\n                        {\n                            headerProperties?.map((headerProperty, index) => {\n                                if (index < 3) {\n                                    return (\n                                        <Row>\n                                            <Form.Group className=\"m-2\" controlId=\"refid\" as={Col}>\n                                                <Form.Label>{headerProperty}</Form.Label>\n                                                <Form.Control\n                                                    className='mr-1 ml-1'\n                                                    value={properties[index]}\n                                                    onChange={(e) => handleChange(e, index)}\n                                                    type=\"text\"\n                                                    readOnly\n                                                />\n                                            </Form.Group>\n                                        </Row>\n                                    )\n                                } else {\n                                    return (\n                                        <Row>\n                                            <Form.Group className=\"m-2\" controlId=\"refid\" as={Col}>\n                                                <Form.Label>{headerProperty}</Form.Label>\n                                                <div className=\"d-flex flex-row\">\n                                                    <Form.Control\n                                                        className='mr-1 ml-1'\n                                                        value={item.existingProperties[index]}\n                                                        type=\"text\"\n                                                        readOnly\n                                                    />\n                                                    <Form.Control\n                                                        className={`mr-1 ml-1 ${item.existingProperties[index] != properties[index] ? 'text-danger' : \"\"}`}\n                                                        value={properties[index]}\n                                                        onChange={(e) => handleChange(e, index)}\n                                                        type=\"text\"\n                                                        readOnly\n                                                    />\n                                                </div>\n                                            </Form.Group>\n                                        </Row>\n                                    )\n                                }\n                                    \n                            })}\n                            {item.taskStatus && <Row>\n                            <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\n                                <Form.Label>Requested Status</Form.Label>\n                                <Form.Control  type=\"text\" rows={3} required value={item.taskStatus} readonly />\n                            </Form.Group>\n                        </Row>}\n                        <Row>\n                            <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\n                                <Form.Label>Reason for the change request</Form.Label>\n                                <Form.Control as=\"textarea\" rows={3} required value={item.comment} readonly />\n                            </Form.Group>\n                        </Row>\n                        <Row>\n                            <Form.Group className=\"m-3\" controlId=\"refid\" as={Col}>\n                                <Form.Label>Approve Comment</Form.Label>\n                                <Form.Control as=\"textarea\" rows={3} readonly value={item.approveComment}  />\n                            </Form.Group>\n                        </Row>\n                       \n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleSubmit}>\n                    Acknowledge\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n\n            <Snackbar open={open} autoHideDuration={6000} onClose={alertClose} anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}>\n                <Alert onClose={alertClose} severity={severity} sx={{ width: '100%' }}>\n                    {alart}\n                </Alert>\n            </Snackbar>\n\n            <Dialog\n                open={openDialog}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n            >\n                <DialogContent>\n                    <Box sx={{ display: 'flex' }}>\n                        <CircularProgress />\n                    </Box>\n\n\n                </DialogContent>\n            </Dialog>\n        </div>\n\n    );\n}\n\nexport default withRouter(ApprovedHandoverChangesBody)","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["Alert","React","props","ref","elevation","variant","withRouter","items","setItems","useState","item","setItem","properties","setProperties","headerProperties","setHeaderProperties","open","setOpen","severity","setSeverity","alart","setAlart","errors","setErrors","openDialog","setOpenDialog","handleChange","e","index","target","value","show","setShow","handleClose","axiosInstance","axios","baseURL","process","useEffect","getData","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","catch","err","console","log","alertClose","event","reason","columns","field","headerName","width","align","renderCell","cellValues","style","onClick","handleShow","row","newProperties","className","height","getRowId","_id","rows","pageSize","rowsPerPageOptions","rowHeight","headerHeight","components","Toolbar","GridToolbar","onHide","size","animation","closeButton","onSubmit","map","headerProperty","controlId","as","Col","onChange","type","readOnly","existingProperties","taskStatus","required","readonly","comment","approveComment","put","status","taskRefID","taskObject","taskHistory","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","display"],"sourceRoot":""}