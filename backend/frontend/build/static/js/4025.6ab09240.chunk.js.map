{"version":3,"file":"static/js/4025.6ab09240.chunk.js","mappings":"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","sources":["components/PendingCommissioningSpecificTaskBody.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport Snackbar from \"@mui/material/Snackbar\";\nimport MuiAlert from \"@mui/material/Alert\";\nimport XLSX from \"xlsx\";\nimport Dialog from \"@mui/material/Dialog\";\nimport Box from \"@mui/material/Box\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\n\nconst Alert = React.forwardRef(function Alert(props, ref) {\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\nfunction PendingCommissioningSpecificTaskBody(props) {\n  let [users, setUsers] = useState([]);\n  let [companies, setCompanies] = useState([]);\n  let [severity, setSeverity] = useState(\"\");\n  let [alart, setAlart] = useState(\"\");\n  const axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_BACKEND_URL,\n  });\n\n  let [form, setForm] = useState({});\n  let [errors, setErrors] = useState({});\n  let [open, setOpen] = useState(false);\n  let [openDialog, setOpenDialog] = useState(false);\n\n  let setField = (field, value) => {\n    setForm({\n      ...form,\n      [field]: value,\n    });\n    if (!!errors[field])\n      setErrors({\n        ...errors,\n        [field]: null,\n      });\n  };\n\n  const findFormErrors = () => {\n    const { taskCommencedComment } = form;\n    const newErrors = {};\n    // name errors\n    if (!taskCommencedComment || taskCommencedComment === \"\")\n      newErrors.taskCommencedComment =\n        \"cannot be blank!   Note-Please comment the actual commissioning date if not commissioned today \";\n\n    return newErrors;\n  };\n\n  useEffect(() => {\n    // console.log(props.location.data.row)\n    setUsers([{ name: props.location.data.row.assignedMobitelOfficer.name }]);\n    setCompanies([\n      { companyName: props.location.data.row.assignedSubcon.companyName },\n    ]);\n    setForm({\n      taskRef: props.location.data.row.taskRef,\n      siteID: props.location.data.row.siteID,\n      siteName: props.location.data.row.siteName,\n      // 'plannedTaskStartDate':props.location.data.row.plannedTaskStartDate.split('T')[0],\n      // 'actualTaskStartDate':props.location.data.row.taskHistory.find(x=>x.taskStatus==='Task commenced').performedDate.split('T')[0],\n      // 'targetTaskComDate':props.location.data.row.targetTaskComDate.split('T')[0],\n      taskAssignedDiv: props.location.data.row.taskAssignedDiv,\n      assignedMobitelOfficer:\n        props.location.data.row.assignedMobitelOfficer.name,\n      // 'workScope':props.location.data.row.workScope,\n      assignedSubcon: props.location.data.row.assignedSubcon.companyName,\n      // 'taskassignedSubconOfficer': props.location.data.row.taskassignedSubconOfficer,\n      // 'taskassignedMobileNo': props.location.data.row.taskassignedMobileNo\n    });\n  }, []);\n\n  const onAccept = (e) => {\n    e.preventDefault();\n\n    const newErrors = findFormErrors();\n    // Conditional logic:\n    if (Object.keys(newErrors).length > 0) {\n      // We got errors!\n      setErrors(newErrors);\n      // console.log(\"Manod-Im within onAccept-If\")\n    } else {\n      const taskObject = {\n        comStatus: \"Site Commissioned\",\n      };\n      // console.log(\"Manod-Im within onAccept-Else\")\n      // console.log(form.assignedMobitelOfficer)\n      // console.log(\"Jana\")\n      axiosInstance\n        .put(\n          \"projonline/update/\" + props.location.data.row._id,\n          {\n            taskObject,\n            taskHistory: {\n              comStatus: \"Site Commissioned\",\n              comment: form.taskCommencedComment,\n            },\n          },\n          {\n            headers: {\n              token:\n                \"Bearer \" +\n                JSON.parse(localStorage.getItem(\"user\")).accessToken,\n            },\n          }\n        )\n        .then((res) => {\n          // console.log(res.data)\n\n          setOpenDialog(true);\n          // smsFetch(form.taskassignedMobileNo)\n          setTimeout(() => {\n            setAlart(res.data.alart);\n            setSeverity(res.data.severity);\n            setOpen(true);\n            // console.log(\"Manod-Im within 1\")\n          }, 2000);\n\n          setTimeout(() => {\n            setOpenDialog(false);\n            setOpen(false);\n            props.history.push({ pathname: \"/pendingCommissioningTask\" });\n            // console.log(\"Manod-Im within 2\")\n          }, 5000);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      {/* Content Wrapper. Contains page content */}\n      <div className=\"content-wrapper\">\n        {/* Content Header (Page header) */}\n        <div className=\"content-header\">\n          <section className=\"content-header\">\n            <div className=\"container-fluid\">\n              <div>\n                <h1>Task ID: {form.taskRef} </h1>\n              </div>\n            </div>\n            {/* /.container-fluid */}\n          </section>\n        </div>\n        {/* /.content-header */}\n        {/* Main content */}\n        <section className=\"content\">\n          <div className=\"container-fluid\">\n            <Form>\n              <Row>\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Site ID</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.siteID}\n                    className=\"col-md-9\"\n                    type=\"text\"\n                    placeholder=\"Enter site ID\"\n                    isInvalid={!!errors.siteID}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.siteID}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Site Name</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.siteName}\n                    type=\"text\"\n                    placeholder=\"Enter site Name\"\n                    isInvalid={!!errors.siteName}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.siteName}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} sm={3}></Form.Group>\n              </Row>\n\n              <Row>\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Task Assigned Division</Form.Label>\n                  <Form.Control\n                    disabled\n                    value={form.taskAssignedDiv}\n                    as=\"select\"\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.taskAssignedDiv}\n                  >\n                    <option>Choose...</option>\n                    <option>Project_Radio</option>\n                    <option>Project_Core</option>\n                    <option>Project_TX</option>\n                    <option>Project_IBS</option>\n                    <option>Project_WiFi</option>\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskAssignedDiv}\n                  </Form.Control.Feedback>\n                  <Form.Group as={Col} sm={3}></Form.Group>\n                </Form.Group>\n\n                <Form.Group as={Col} sm={3}>\n                  <Form.Label>Assigned Mobitel Officer</Form.Label>\n                  <Form.Control\n                    disabled\n                    as=\"select\"\n                    value={form.assignedMobitelOfficer}\n                    defaultValue=\"Choose...\"\n                    isInvalid={!!errors.assignedMobitelOfficer}\n                  >\n                    <option>Choose...</option>\n                    {users.map((opt) => (\n                      <option value={opt._id}>{opt.name}</option>\n                    ))}\n                  </Form.Control>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.assignedMobitelOfficer}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col}></Form.Group>\n              </Row>\n\n              <Row className=\"mb-3\">\n                {/* <Form.Group as={Col} >\n                        {/* <Form.Label>Assigned subcontractor</Form.Label>\n                        <Form.Control disabled value={form.assignedSubcon} as=\"select\" defaultValue=\"Choose...\" isInvalid={ !!errors.assignedSubcon } >\n                            <option>Choose...</option>\n                            {companies.map(opt => (\n                                    <option value={opt._id}>{opt.companyName}</option>\n                            ))}\n                        </Form.Control>\n                        <Form.Control.Feedback type='invalid'>\n                                { errors.assignedSubcon }\n                            </Form.Control.Feedback>\n                        </Form.Group> */}\n\n                {/* <Form.Group as={Col} >\n                        <Form.Label>Handover Details</Form.Label>\n                            <br />\n                                <Button onClick={downloadHandover} variant=\"primary\" type=\"button\">\n                                    Click to Download\n                                </Button>\n                        </Form.Group> */}\n\n                {/* <Form.Group as={Col} >\n                        </Form.Group> */}\n              </Row>\n\n              <Row>\n                <Form.Group as={Col} sm={6}>\n                  <Form.Label>Comments</Form.Label>\n                  <Form.Control\n                    onChange={(e) =>\n                      setField(\"taskCommencedComment\", e.target.value)\n                    }\n                    as=\"textarea\"\n                    rows={2}\n                    value={form.taskCommencedComment}\n                    placeholder=\"Enter your comments or actual commissioned date if not commissioned today\"\n                    isInvalid={!!errors.taskCommencedComment}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.taskCommencedComment}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Row>\n\n              <Row></Row>\n              <Button variant=\"primary\" onClick={onAccept}>\n                Commissioning Task completed\n              </Button>\n            </Form>\n          </div>\n          {/* /.container-fluid */}\n        </section>\n        {/* /.content */}\n      </div>\n\n      <Snackbar\n        open={open}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n      >\n        <Alert onClose={handleClose} severity={severity} sx={{ width: \"100%\" }}>\n          {alart}\n        </Alert>\n      </Snackbar>\n      <Dialog\n        open={openDialog}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogContent>\n          <Box sx={{ display: \"flex\" }}>\n            <CircularProgress />\n          </Box>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default withRouter(PendingCommissioningSpecificTaskBody);\n"],"names":["Alert","React","props","ref","elevation","variant","withRouter","useState","users","setUsers","setCompanies","severity","setSeverity","alart","setAlart","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","openDialog","setOpenDialog","useEffect","name","location","data","row","assignedMobitelOfficer","companyName","assignedSubcon","taskRef","siteID","siteName","taskAssignedDiv","handleClose","event","reason","className","as","Col","sm","disabled","value","type","placeholder","isInvalid","defaultValue","map","opt","_id","onChange","e","field","target","rows","taskCommencedComment","onClick","preventDefault","newErrors","findFormErrors","Object","keys","length","put","taskObject","comStatus","taskHistory","comment","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","setTimeout","history","push","pathname","catch","error","console","log","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","sx","width","display"],"sourceRoot":""}