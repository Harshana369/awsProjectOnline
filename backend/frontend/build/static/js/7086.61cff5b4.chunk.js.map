{"version":3,"file":"static/js/7086.61cff5b4.chunk.js","mappings":"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","sources":["components/RaisePrTasksBody.jsx","components/filters.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  Dialog,\r\n  DialogContent,\r\n} from \"@mui/material\";\r\nimport { Table } from \"reactstrap\";\r\nimport { useTable, useSortBy, useFilters } from \"react-table\";\r\nimport { Filter, DefaultColumnFilter } from \"./filters\";\r\n\r\nfunction RaisePrTasksBody(props) {\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n  const [items, setItems] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  const axiosInstance = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setOpenDialog(true);\r\n    axiosInstance\r\n      .get(\"projonline/gettasks/toBeRaisedPr\", {\r\n        headers: {\r\n          token:\r\n            \"Bearer \" + JSON.parse(localStorage.getItem(\"user\")).accessToken,\r\n        },\r\n      })\r\n      .then((res) => {\r\n        setItems(res.data.tasks);\r\n        // console.log(res.data.tasks);\r\n        setOpenDialog(false);\r\n        return;\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  // Define your data\r\n  const data = useMemo(() => items, [items]);\r\n\r\n  // Define your columns\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Task ID\",\r\n        accessor: \"taskRef\",\r\n      },\r\n      {\r\n        Header: \"Site ID\",\r\n        accessor: \"siteID\",\r\n      },\r\n      {\r\n        Header: \"Assigned Subcon\",\r\n        accessor: (row) => row.assignedSubcon.companyName,\r\n      },\r\n      {\r\n        Header: \"Assigned Officer\",\r\n        accessor: (row) => row.assignedMobitelOfficer.name,\r\n      },\r\n      {\r\n        Header: \"Initiated date\",\r\n        accessor: (row) => {\r\n          const subconAllocatedHistory = row.taskHistory.find(\r\n            (x) => x.taskStatus === \"Subcon allocated\"\r\n          );\r\n          return subconAllocatedHistory\r\n            ? subconAllocatedHistory.performedDate.split(\"T\")[0]\r\n            : \"\";\r\n        },\r\n      },\r\n      {\r\n        Header: \"Capex Pr Amount\",\r\n        accessor: (row) => {\r\n          const boqs = row.boqs;\r\n          const value1 =\r\n            boqs.length > 0 ? boqs[boqs.length - 1].CapexPrAmount || 0 : 0;\r\n          const value = value1 || \"Not Defined\";\r\n          return value.toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2,\r\n          });\r\n        },\r\n      },\r\n\r\n      {\r\n        Header: \"Opex Pr Amount\",\r\n        accessor: (row) => {\r\n          const boqs = row.boqs;\r\n          const value1 =\r\n            boqs.length > 0 ? boqs[boqs.length - 1].OpexPrAmount || 0 : 0;\r\n          const value = value1 || \"Not Defined\";\r\n          return value.toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2,\r\n          });\r\n        },\r\n      },\r\n\r\n      {\r\n        Header: \"Total Cost\",\r\n        accessor: (row) => {\r\n          const value = row.boqs[row.boqs.length - 1].totalCost || 0;\r\n          return value.toLocaleString(\"en-US\", {\r\n            minimumFractionDigits: 2,\r\n            maximumFractionDigits: 2,\r\n          });\r\n        },\r\n      },\r\n      {\r\n        Header: \"To Raise PR\",\r\n        accessor: \"toRaisePR\",\r\n        Cell: ({ cell: { value, row } }) => (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              handleClick(event, row.original);\r\n            }}\r\n          >\r\n            To Raise PR\r\n          </Button>\r\n        ),\r\n        Filter: false,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const handleClick = (event, cellValues) => {\r\n    props.history.push({ pathname: \"/raisePrSpecificTask\", data: cellValues });\r\n  };\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable(\r\n      { columns, data, defaultColumn: { Filter: DefaultColumnFilter } },\r\n      useFilters,\r\n      useSortBy\r\n    );\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n\r\n    setOpenDialog(false);\r\n  };\r\n  return (\r\n    <div>\r\n      {/* Content Wrapper. Contains page content */}\r\n      <div className=\"content-wrapper\">\r\n        <div className=\"content-header\">\r\n          <section className=\"content-header\">\r\n            <div className=\"container-fluid\">\r\n              <div className=\"row mb-2\">\r\n                <div className=\"col-sm-6\">\r\n                  <h1>All Tasks to Raise PRs</h1>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </section>\r\n        </div>\r\n        {/* ... (your existing content) ... */}\r\n        <div style={{ backgroundColor: \"white\", width: \"100%\" }}>\r\n          <Table bordered hover {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map((column) => (\r\n                    <th {...column.getHeaderProps()}>\r\n                      <div {...column.getSortByToggleProps()}>\r\n                        {column.render(\"Header\")}\r\n                      </div>\r\n                      <Filter column={column} />\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n\r\n            <tbody {...getTableBodyProps()}>\r\n              {rows.map((row) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell) => (\r\n                      <td {...cell.getCellProps()} style={{ width: \"10px\" }}>\r\n                        {cell.render(\"Cell\")}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </Table>\r\n        </div>\r\n        <Dialog\r\n          open={openDialog}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"alert-dialog-title\"\r\n          aria-describedby=\"alert-dialog-description\"\r\n        >\r\n          <DialogContent>\r\n            <Box sx={{ display: \"flex\" }}>\r\n              <CircularProgress />\r\n            </Box>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(RaisePrTasksBody);\r\n","import React from \"react\";\r\nimport { Input, CustomInput } from \"reactstrap\";\r\n\r\nexport const  Filter = ({ column }) => {\r\n  return (\r\n    <div style={{ marginTop: 5 }}>\r\n      {column.canFilter && column.render(\"Filter\")}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const DefaultColumnFilter = ({\r\n  column: {\r\n    filterValue,\r\n    setFilter,\r\n    preFilteredRows: { length },\r\n  },\r\n}) => {\r\n  return (\r\n    <Input\r\n      value={filterValue || \"\"}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n      placeholder={`search (${length}) ...`}\r\n    />\r\n  );\r\n};\r\n\r\nexport const SelectColumnFilter = ({\r\n  column: { filterValue, setFilter, preFilteredRows, id },\r\n}) => {\r\n  const options = React.useMemo(() => {\r\n    const options = new Set();\r\n    preFilteredRows.forEach((row) => {\r\n      options.add(row.values[id]);\r\n    });\r\n    return [...options.values()];\r\n  }, [id, preFilteredRows]);\r\n\r\n  return (\r\n    <CustomInput\r\n      id=\"custom-select\"\r\n      type=\"select\"\r\n      value={filterValue}\r\n      onChange={(e) => {\r\n        setFilter(e.target.value || undefined);\r\n      }}\r\n    >\r\n      <option value=\"\">All</option>\r\n      {options.map((option) => (\r\n        <option key={option} value={option}>\r\n          {option}\r\n        </option>\r\n      ))}\r\n    </CustomInput>\r\n  );\r\n};\r\n"],"names":["withRouter","props","openDialog","setOpenDialog","useState","items","setItems","page","setPage","totalPages","setTotalPages","axiosInstance","axios","baseURL","process","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","tasks","catch","err","console","log","useMemo","columns","Header","accessor","row","assignedSubcon","companyName","assignedMobitelOfficer","name","subconAllocatedHistory","taskHistory","find","x","taskStatus","performedDate","split","boqs","length","CapexPrAmount","toLocaleString","minimumFractionDigits","maximumFractionDigits","OpexPrAmount","totalCost","Cell","cell","value","variant","color","onClick","event","handleClick","original","Filter","cellValues","history","push","pathname","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","useTable","defaultColumn","DefaultColumnFilter","useFilters","useSortBy","className","style","backgroundColor","width","bordered","hover","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","getSortByToggleProps","render","getRowProps","cells","getCellProps","open","onClose","reason","sx","display","marginTop","canFilter","filterValue","setFilter","preFilteredRows","onChange","e","target","undefined","placeholder"],"sourceRoot":""}