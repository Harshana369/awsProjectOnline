{"version":3,"file":"static/js/6878.97a4e99e.chunk.js","mappings":"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","sources":["components/UpdateSpecificUser.jsx","../node_modules/form-data/lib/browser.js"],"sourcesContent":["import React, {useState, useEffect, useCallback }  from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport { Form, Button, Row, Col, Table} from 'react-bootstrap';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert from '@mui/material/Alert';\r\nimport XLSX from 'xlsx'\r\nimport FormData from 'form-data'\r\nimport Box from '@mui/material/Box';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Dialog from '@mui/material/Dialog'\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\n\r\nfunction UpdateSpecificUser(props) {\r\n\r\n    let [users, setUsers] = useState([]);\r\n    let [companies, setCompanies] = useState([]);\r\n    let [msg,setMsg] =useState(\"\")\r\n    let [variant,setVariant] =useState(\"\")\r\n\r\n    const axiosInstance = axios.create({\r\n        baseURL: process.env.REACT_APP_BACKEND_URL,\r\n    })\r\n    \r\n    let [form, setForm] = useState({})\r\n    let [errors, setErrors] = useState({})\r\n    let [open, setOpen] = useState(false);\r\n    let [openDialog, setOpenDialog] = useState(false);\r\n\r\n    let setField = (field, value) => {\r\n    setForm({\r\n            ...form,\r\n            [field]: value\r\n        })\r\n        if ( !!errors[field] ) setErrors({\r\n            ...errors,\r\n            [field]: null\r\n        })\r\n        // console.log(field,value)\r\n    }\r\n    \r\n    const findFormErrors = () => {\r\n        const { email,company, projectCoordinator, userDiv, visbilityBasedOn, mobileNo, verificationOne, verificationTwo, approval} = form\r\n        const newErrors = {}\r\n        // name errors\r\n\r\n        if ( company === 'Mobitel' && userDiv === 'Choose...') newErrors.userDiv = 'Choose a division!'\r\n        if ( company === 'Mobitel' && visbilityBasedOn === 'Choose...') newErrors.visbilityBasedOn = 'Choose a option!'\r\n        //if ( company === 'Mobitel' && projectCoordinator === 'Choose...') newErrors.projectCoordinator = 'Choose a project Coordinator!'\r\n        // if ( company === 'Mobitel' && verificationOne === 'Choose...') newErrors.verificationOne = 'Choose a option!'\r\n        // if ( company === 'Mobitel' && verificationTwo === 'Choose...') newErrors.verificationTwo = 'Choose a option!'\r\n        // if ( company === 'Mobitel' && approval === 'Choose...') newErrors.approval = 'Choose a option!'\r\n        if ( !email || email === '' ) newErrors.email = 'cannot be blank!'\r\n        if ( !mobileNo || mobileNo === '' ) newErrors.mobileNo = 'cannot be blank!'\r\n\r\n        return newErrors\r\n    }\r\n    \r\n    useEffect(() => {\r\n        axiosInstance.get('projonline/users',{headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}}).then(res=>{\r\n            \r\n            // console.log(props.location.data)\r\n            setUsers(res.data.users.filter((obj) => (obj.company.companyName === 'Mobitel')))\r\n            setCompanies(res.data.companys)\r\n\r\n            // console.log(props.location.data.row.company.companyName)\r\n            if(props.location.data.row.company.companyName===\"Mobitel\"){\r\n                let verificationOneId =\"\"\r\n                let verificationTwoId =\"\"\r\n                let approvalId =\"\"\r\n\r\n                switch(props.location.data.row.approvalPath.length){\r\n                    case 0:\r\n                        verificationOneId = \"1\"\r\n                        verificationTwoId = \"1\"\r\n                        approvalId = \"1\"\r\n                        break\r\n                    case 1:\r\n                        verificationOneId = props.location.data.row.approvalPath[0]._id\r\n                        verificationTwoId = \"1\"\r\n                        approvalId = \"1\"\r\n                        break\r\n                    case 2:\r\n                        verificationOneId = props.location.data.row.approvalPath[0]._id\r\n                        verificationTwoId = \"2\"\r\n                        approvalId = props.location.data.row.approvalPath[1]._id\r\n                        break\r\n                    case 3:\r\n                        verificationOneId = props.location.data.row.approvalPath[0]._id\r\n                        verificationTwoId = props.location.data.row.approvalPath[1]._id\r\n                        approvalId = props.location.data.row.approvalPath[2]._id\r\n                        break\r\n                }\r\n                setForm({\r\n                    'name':props.location.data.row.name,\r\n                    'email':props.location.data.row.email,\r\n                    'company':props.location.data.row.company.companyName,\r\n                    'userDiv':props.location.data.row.userDiv,\r\n                    'mobileNo':props.location.data.row.mobileNo,\r\n                    'username':props.location.data.row.username,\r\n                    'adminRights':props.location.data.row.adminRights,\r\n                    'activeStatus':props.location.data.row.activeStatus,\r\n                    'userCanAssignForTask':props.location.data.row.userCanAssignForTask,\r\n                    'visbilityBasedOn':props.location.data.row.visbilityBasedOn,\r\n                    'projectCoordinator':props.location.data.row.projectCoordinator,\r\n                    'isProjectCoordinator':props.location.data.row.isProjectCoordinator,\r\n                    'verificationOneId':verificationOneId,\r\n                    'verificationTwoId':verificationTwoId,\r\n                    'approvalId':approvalId,\r\n                })\r\n            }else{\r\n                setForm({\r\n                    'name':props.location.data.row.name,\r\n                    'email':props.location.data.row.email,\r\n                    'company':props.location.data.row.company.companyName,\r\n                    'userDiv':props.location.data.row.userDiv,\r\n                    'mobileNo':props.location.data.row.mobileNo,\r\n                    'username':props.location.data.row.username,\r\n                    'adminRights':props.location.data.row.adminRights,\r\n                    'activeStatus':props.location.data.row.activeStatus,\r\n                    'userCanAssignForTask':props.location.data.row.userCanAssignForTask,\r\n                    'visbilityBasedOn':props.location.data.row.visbilityBasedOn,\r\n                    'projectCoordinator':props.location.data.row.projectCoordinator,\r\n                    'isProjectCoordinator':props.location.data.row.isProjectCoordinator,\r\n\r\n                })\r\n            }\r\n            \r\n\r\n            return\r\n        }).catch(err=>{\r\n            console.log(err)\r\n        })\r\n\r\n    } , [ ] )\r\n\r\n\r\n    const onSubmit=(e)=> {\r\n        e.preventDefault()\r\n        let userObject ={}\r\n        const newErrors = findFormErrors()\r\n        // Conditional logic:\r\n        if ( Object.keys(newErrors).length > 0 ) {\r\n            // We got errors!\r\n            setErrors(newErrors)\r\n        } else {\r\n                if(form.company===\"Mobitel\"){\r\n                \r\n                var approvalPath = [form.verificationOneId,form.verificationTwoId,form.approvalId].filter((element) => element !==\"1\").filter((element) => element !==\"2\")\r\n                // console.log(approvalPath)\r\n\r\n                userObject = {\r\n                name:form.name,\r\n                email:form.email,\r\n                company:companies.find(item => item.companyName === form.company)._id,\r\n                userDiv:form.userDiv,\r\n                mobileNo:form.mobileNo,\r\n                username:form.username,\r\n                adminRights:form.adminRights,\r\n                activeStatus:form.activeStatus,\r\n                userCanAssignForTask:form.userCanAssignForTask,\r\n                visbilityBasedOn:form.visbilityBasedOn,\r\n                projectCoordinator:(form.projectCoordinator==\"1\") ? null:form.projectCoordinator,\r\n                isProjectCoordinator:form.isProjectCoordinator,\r\n                approvalPath: approvalPath\r\n            }\r\n                }else{\r\n                    userObject = {\r\n                        name:form.name,\r\n                        email:form.email,\r\n                        company:companies.find(item => item.companyName === form.company)._id,\r\n                        userDiv:form.userDiv,\r\n                        mobileNo:form.mobileNo,\r\n                        username:form.username,\r\n                        activeStatus:form.activeStatus,\r\n\r\n                    }\r\n\r\n                }\r\n                \r\n\r\n            // console.log(props.location.data.row._id)\r\n\r\n            axiosInstance.put('projonline/user/'+props.location.data.row._id, userObject,{headers:{token:\"Bearer \"+ JSON.parse(localStorage.getItem(\"user\")).accessToken}})\r\n                .then((res) => {\r\n                    \r\n                    // console.log(props.location.data.row._id)\r\n                    setOpenDialog(true)\r\n                    setTimeout(() => {\r\n                        setMsg(res.data.msg)\r\n                        setVariant(res.data.variant)\r\n                        setOpen(true)\r\n                    }, 2000)\r\n\r\n                    setTimeout(() => {\r\n                        setOpenDialog(false)\r\n                        setOpen(false)\r\n                        props.history.push({pathname:'/updateUser'})\r\n                    }, 5000)\r\n\r\n                    \r\n\r\n                }).catch((error) => {\r\n                    console.log(error)\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n          return;\r\n        }\r\n    \r\n        setOpen(false);\r\n      };\r\n    \r\n \r\n \r\n    return (\r\n        <div>\r\n            \r\n                        {/* Content Wrapper. Contains page content */}\r\n            <div className=\"content-wrapper\">\r\n            {/* Content Header (Page header) */}\r\n            <div className=\"content-header\">\r\n            <section className=\"content-header\">\r\n                    <div className=\"container-fluid\">\r\n                    <div className=\"row mb-2\">\r\n                        <div className=\"col-sm-6\">\r\n                        <h1>Update User Details</h1>\r\n                        </div>\r\n                    </div>\r\n                    </div>{/* /.container-fluid */}\r\n                </section>\r\n            </div>\r\n            {/* /.content-header */}\r\n            {/* Main content */}\r\n            <section className=\"content\">\r\n                <div className=\"container-fluid\">\r\n                <form onSubmit={onSubmit} enctype=\"multipart/form-data\">\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Name</Form.Label>\r\n                            <Form.Control onChange={ e => setField('name', e.target.value) } value = {form.name}  className=\"col-md-9\" type=\"text\" isInvalid={ !!errors.name } disabled/>\r\n                            <Form.Control.Feedback type='invalid'>\r\n                                { errors.name }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} >\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control onChange={ e => setField('username', e.target.value) } value = {form.username} className=\"col-md-9\" type=\"text\" isInvalid={ !!errors.username } disabled/>\r\n                        <Form.Control.Feedback type='invalid'>\r\n                                { errors.username }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Col} >\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control onChange={ e => setField('email', e.target.value) } value = {form.email} className=\"col-md-9\" type=\"text\" isInvalid={ !!errors.email }/>\r\n                        <Form.Control.Feedback type='invalid'>\r\n                                { errors.email }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n\r\n                    </Row>\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Company</Form.Label>\r\n                            <Form.Control onChange={ e => setField('company', e.target.value) } value = {form.company}  className=\"col-md-9\" as=\"select\" defaultValue=\"Choose...\" isInvalid={ !!errors.company }>\r\n                                {companies.map(opt => (\r\n                                        <option value={opt.companyName}>{opt.companyName}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type='invalid'>\r\n                                { errors.company }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} >\r\n                        <Form.Label>User Division</Form.Label>\r\n                        <Form.Control onChange={ e => setField('userDiv', e.target.value) } value = {form.userDiv} className=\"col-md-9\" as=\"select\" defaultValue=\"Choose...\" isInvalid={ !!errors.userDiv } disabled={form.company !== \"Mobitel\" ? true:false}>\r\n                                <option value=\"Choose...\">Choose...</option>\r\n                                <option>Planning_Radio</option>\r\n                                <option>Planning_Core</option>\r\n                                <option>Planning_TX</option>\r\n                                <option>Planning_IBS</option>\r\n                                <option>Planning_WiFi</option>\r\n                                <option>Project_Radio</option>\r\n                                <option>Project_Core</option>\r\n                                <option>Project_TX</option>\r\n                                <option>Project_IBS</option>\r\n                                <option>Project_WiFi</option>\r\n                        </Form.Control>\r\n                        <Form.Control.Feedback type='invalid'>\r\n                                { errors.userDiv }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Col} >\r\n                        <Form.Label>Mobile No</Form.Label>\r\n                        <Form.Control onChange={ e => setField('mobileNo', e.target.value) } value = {form.mobileNo} className=\"col-md-9\" type=\"number\" isInvalid={ !!errors.mobileNo }/>\r\n                        <Form.Control.Feedback type='invalid'>\r\n                                { errors.mobileNo }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n\r\n                    </Row>\r\n\r\n\r\n                    <Row className=\"mb-3\">\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Visbility Based On</Form.Label>\r\n                            <Form.Control onChange={ e => setField('visbilityBasedOn', e.target.value) } value = {form.visbilityBasedOn}  className=\"col-md-9\" as=\"select\" defaultValue=\"Choose...\" isInvalid={ !!errors.visbilityBasedOn } disabled={form.company !== \"Mobitel\" ? true:false}>\r\n                            <option>Choose...</option>\r\n                            <option value=\"Admin\">Admin</option>\r\n                            <option value=\"Planning\">Planning</option>\r\n                            <option value=\"Project_Div_Head\">Project_Div_Head</option>\r\n                            <option value=\"Project_PM\">Project_PM</option>\r\n                            <option value=\"Project_TO\">Project_TO</option>\r\n                            <option value=\"Project_Coor\">Project_Coor</option>\r\n                            <option value=\"Subcon\">Subcon</option>\r\n                            </Form.Control>\r\n                            <Form.Control.Feedback type='invalid'>\r\n                                { errors.visbilityBasedOn }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} >\r\n                        <Form.Label>Project Coordinator</Form.Label>\r\n                        <Form.Control as=\"select\" onChange={ e => setField('projectCoordinator', e.target.value) } value={form.projectCoordinator} className=\"col-md-9\" defaultValue=\"Choose...\" isInvalid={ !!errors.visbilityBasedOn } disabled={form.company !== \"Mobitel\" ? true:false}>\r\n                                <option value=\"1\">Choose...</option>\r\n                                {users.map(opt => (\r\n                                    <option value={opt._id}>{opt.name}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                        \r\n                        <Form.Control.Feedback type='invalid'>\r\n                                { errors.projectCoordinator }\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Is Project Coordinator</Form.Label>\r\n                            <Form.Check onChange={ e => setField('isProjectCoordinator', !form.isProjectCoordinator) } value = {form.isProjectCoordinator} checked = {form.isProjectCoordinator} className=\"col-md-9\" id=\"custom-switch-4\" type=\"switch\" disabled={form.company !== \"Mobitel\" ? true:false} />\r\n                            \r\n                        </Form.Group>\r\n\r\n\r\n                    </Row>\r\n                                                   \r\n                    <Row className=\"mb-3\">\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Admin Rights</Form.Label>\r\n                            <Form.Check onChange={ e => setField('adminRights', !form.adminRights) } value = {form.adminRights} checked = {form.adminRights} className=\"col-md-9\" id=\"custom-switch-1\" type=\"switch\"  disabled={form.company !== \"Mobitel\" ? true:false}/>\r\n                            \r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} >\r\n                        <Form.Label>Active Status</Form.Label>\r\n                        <Form.Check onChange={ e => setField('activeStatus', !form.activeStatus) } value = {form.activeStatus} checked = {form.activeStatus} className=\"col-md-9\" id=\"custom-switch-2\" type=\"switch\"/>\r\n                        \r\n                        </Form.Group>\r\n\r\n\r\n                        <Form.Group as={Col} >\r\n                        <Form.Label>User Can Assign For Task</Form.Label>\r\n                        <Form.Check onChange={ e => setField('userCanAssignForTask', !form.userCanAssignForTask) } value = {form.userCanAssignForTask} checked = {form.userCanAssignForTask} className=\"col-md-9\" id=\"custom-switch-3\" type=\"switch\" disabled={form.company !== \"Mobitel\" ? true:false}/>\r\n                        \r\n                        </Form.Group>\r\n\r\n\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Verification by (Level 1)</Form.Label>\r\n                            <Form.Control as=\"select\" className=\"col-md-9\" onChange={ e => setField('verificationOneId', e.target.value) } value={form.verificationOneId} defaultValue=\"Choose...\" disabled={form.company !== \"Mobitel\" || form.userCanAssignForTask === false ? true:false}>\r\n                            <option value=\"1\">Choose..</option>\r\n                                {users.map(opt => (\r\n                                    <option value={opt._id}>{opt.name}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Verification by (Level 2)</Form.Label>\r\n                            <Form.Control as=\"select\" className=\"col-md-9\" onChange={ e => setField('verificationTwoId', e.target.value) }  value={form.verificationTwoId}  defaultValue=\"Choose...\" disabled={form.company !== \"Mobitel\" || form.userCanAssignForTask === false ? true:false}>\r\n                                <option value=\"1\">Choose..</option>\r\n                                <option value=\"2\">Not Applicable</option>\r\n                                {users.map(opt => (\r\n                                    <option value={opt._id}>{opt.name}</option>\r\n                                ))}\r\n                                \r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col} >\r\n                            <Form.Label>Approval by</Form.Label>\r\n                            <Form.Control as=\"select\" className=\"col-md-9\" onChange={ e => setField('approvalId', e.target.value) } value={form.approvalId} defaultValue=\"Choose...\" disabled={form.company !== \"Mobitel\" || form.userCanAssignForTask === false ? true:false}>\r\n                                 <option value=\"1\">Choose..</option>\r\n                                {users.map(opt => (\r\n                                    <option value={opt._id}>{opt.name}</option>\r\n                                ))}\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n\r\n                    </Row>\r\n                    <Button variant=\"primary\" type=\"submit\">\r\n                        Update User Details\r\n                    </Button>\r\n                </form>\r\n                </div>{/* /.container-fluid */}\r\n            </section>\r\n            {/* /.content */}\r\n            \r\n            \r\n            </div>\r\n\r\n            <Snackbar open={open} autoHideDuration={6000} onClose={handleClose} anchorOrigin={{vertical: \"top\", horizontal: \"center\"}}>\r\n                <Alert onClose={handleClose} severity={variant} sx={{ width: '100%' }} >\r\n                    {msg}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"alert-dialog-title\"\r\n                aria-describedby=\"alert-dialog-description\"\r\n            >\r\n                <DialogContent>\r\n                    <Box sx={{ display: 'flex' }}>\r\n                        <CircularProgress />\r\n                    </Box>\r\n\r\n                    \r\n                </DialogContent>\r\n            </Dialog>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(UpdateSpecificUser)","/* eslint-env browser */\nmodule.exports = typeof self == 'object' ? self.FormData : window.FormData;\n"],"names":["Alert","React","props","ref","elevation","variant","withRouter","useState","users","setUsers","companies","setCompanies","msg","setMsg","setVariant","axiosInstance","axios","baseURL","process","form","setForm","errors","setErrors","open","setOpen","openDialog","setOpenDialog","setField","field","value","useEffect","get","headers","token","JSON","parse","localStorage","getItem","accessToken","then","res","data","filter","obj","company","companyName","companys","location","row","verificationOneId","verificationTwoId","approvalId","approvalPath","length","_id","name","email","userDiv","mobileNo","username","adminRights","activeStatus","userCanAssignForTask","visbilityBasedOn","projectCoordinator","isProjectCoordinator","catch","err","console","log","handleClose","event","reason","className","onSubmit","e","preventDefault","userObject","newErrors","verificationOne","verificationTwo","approval","findFormErrors","Object","keys","element","find","item","put","setTimeout","history","push","pathname","error","enctype","as","Col","onChange","target","type","isInvalid","disabled","defaultValue","map","opt","checked","id","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","sx","width","display","module","exports","self","FormData","window"],"sourceRoot":""}